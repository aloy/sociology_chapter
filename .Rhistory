irism <- melt(iris, measure.var=1:4)#
#
qplot(variable, value, colour=Species, data=irism, group=id, geom=c("point"))#
#
grobs <- grid.ls()#
elems <- grobs$name[grobs$type == "grobListing"]#
elems <- (elems[grep("points", elems)])#
for (i in unique(elems)) { #
grid.garnish(i,#
onmouseover=paste("radius(evt, '",i, ".1', 2)", sep=""), #
onmouseout=paste("radius(evt, '",i, ".1', 0.5)", sep="")#
)#
}#
#
grid.script(filename="http://www.hofroe.net/examples/lineup/action.js")#
#
gridToSVG("iris.svg", export.coords="inline", export.js="inline")
iris$size <- rnorm(nrow(iris), mean=10)
irism <- melt(iris, measure.var=1:4)
qplot(variable, value, colour=Species, data=irism, group=id, geom=c("point", "line"), size=size)
grobs <- grid.ls()#
elems <- grobs$name[grobs$type == "grobListing"]#
elems <- (elems[grep("points", elems)])#
for (i in unique(elems)) { #
grid.garnish(i,#
onmouseover=paste("radius(evt, '",i, ".1', 2)", sep=""), #
onmouseout=paste("radius(evt, '",i, ".1', 0.5)", sep="")#
)#
}#
#
grid.script(filename="http://www.hofroe.net/examples/lineup/action.js")#
#
gridToSVG("iris.svg", export.coords="inline", export.js="inline")
library(reshape2)#
iris$id <- 1:nrow(iris)#
#
irism <- melt(iris, measure.var=1:4)#
#
qplot(variable, value, colour=Species, data=irism, group=id, geom=c("point", "line"))#
#
grobs <- grid.ls()#
elems <- grobs$name[grobs$type == "grobListing"]#
elems <- (elems[grep("points", elems)])#
for (i in unique(elems)) { #
grid.garnish(i,#
onmouseover=paste("radius(evt, '",i, ".1', 2)", sep=""), #
onmouseout=paste("radius(evt, '",i, ".1', 0.5)", sep="")#
)#
}#
#
grid.script(filename="http://www.hofroe.net/examples/lineup/action.js")#
#
gridToSVG("iris.svg", export.coords="inline", export.js="inline")
p <- qplot(x = carat, data = diamonds, geom = "density", fill = cut)#
p <- p + scale_color_manual(values = c("red", "green", "blue", "orange", "purple"), labels = c("OK", "Better", "Average", "Decent", "Fantastic"))#
p
p <- p + scale_colour_manual(values = c("red", "green", "blue", "orange", "purple"), labels = c("OK", "Better", "Average", "Decent", "Fantastic"))
p <- p + scale_fill_manual(values = c("red", "green", "blue", "orange", "purple"), labels = c("OK", "Better", "Average", "Decent", "Fantastic"))
p
n <- 50
x <- rnorm(n*20)#
y <- rnorm(n*20)#
sample <- rep(1:20, n)
sample <- rep(1:20, each=n)
dframe <- data.frame(x,y,sample)
qplot(x, y, facets=~sample)
summary(dframe)
head(dframe)
tail(dframe)
table(sample)
qplot(x, y, facets=~sample, data=dframe)
grobs <- grid.ls()#
names <- grobs$name[grobs$type == "grobListing"]#
names <- names[grep("panel.background", names)]#
for (i in unique(names)) { #
grid.garnish(i,#
onmouseover=paste("frame('",i, ".1')", sep=""),#
onmouseout=paste("deframe('",i, ".1')", sep=""), #
onmousedown=paste("togglehigh('",i, ".1')", sep=""))#
}#
grid.script(filename="http://www.hofroe.net/examples/lineup/action.js")#
gridToSVG("lineup-2.svg", export.coords="inline", export.js="inline")
grid.ls()
library(ggplot2)
library(grid)#
library(gridSVG)
n <- 50#
x <- rnorm(n*20)#
y <- rnorm(n*20)#
sample <- rep(1:20, each=n)#
dframe <- data.frame(x,y,sample)#
#
qplot(x, y, facets=~sample, data=dframe)
grobs <- grid.ls()
grobs$name
names <- names[grep("panel-", names)]
names <- grobs$name[grep("panel-", names)]
names <- grobs$name[grep("panel-", grobs$name)]
names
grobs
idx <- grep("panel-", grobs$name)
idx
grobs[3]
grobs[[3]]
grobs[[12]]
str(grobs)
grobs$gPath[3]
grobs$name[3]
grobs$vpPath[3]
grobs$vpDepth[3]
grobs$name[4]
grobs$name[5]
idx <- grep("panel-", grobs$name)#
for (i in idx) { #
grid.garnish(grobs$name[i],#
onmouseover=paste("frame('",grobs$name[i]+2, ".1')", sep=""),#
onmouseout=paste("deframe('",grobs$name[i]+2, ".1')", sep=""), #
onmousedown=paste("togglehigh('",grobs$name[i]+2, ".1')", sep=""))#
}
idx <- grep("panel-", grobs$name)#
for (i in idx) { #
grid.garnish(grobs$name[i],#
onmouseover=paste("frame('",grobs$name[i+2], ".1')", sep=""),#
onmouseout=paste("deframe('",grobs$name[i+2], ".1')", sep=""), #
onmousedown=paste("togglehigh('",grobs$name[i+2], ".1')", sep=""))#
}
grid.script(filename="http://www.hofroe.net/examples/lineup/action.js")
gridToSVG("lineup-2.svg", export.coords="inline", export.js="inline")
n <- 50#
x <- rnorm(n*20)#
y <- rnorm(n*20)#
sample <- rep(1:20, each=n)#
dframe <- data.frame(x,y,sample)#
#
qplot(x, y, facets=~sample, data=dframe)#
grobs <- grid.ls()#
#
names <- names[grep("panel-", names)]
idx <- grep("panel-", grobs$name)#
for (i in idx) { #
grid.garnish(grobs$name[i],#
onmouseover=paste("frame('",grobs$name[i+2], ".1')", sep=""),#
onmouseout=paste("deframe('",grobs$name[i+2], ".1')", sep=""), #
onmousedown=paste("togglehigh(evt, '",grobs$name[i+2], ".1')", sep=""))#
}
grid.script(filename="http://www.hofroe.net/examples/lineup/action.js")#
gridToSVG("lineup-2.svg", export.coords="inline", export.js="inline")
nasa <- read.csv("http://www.hofroe.net/stat480/nasa/nasa-wide.csv")
nasa <- read.csv("http://www.hofroe.net/stat480/nasa-wide.csv")
library(rggobi)
ggobi(nasa[,1:5])
dim(nasa.wide)
dim(nasa)
names(nasa)
ggobi(nasa[,c(1:5, grep("_1$", names(nasa)))])
ggobi(nasa[,c(1:5, grep("_1$", names(nasa))), grep("_7$", names(nasa)))])
ggobi(nasa[,c(1:5, grep("_1$", names(nasa)), grep("_7$", names(nasa)))])
nasawide <- read.csv("http://www.hofroe.net/stat480/nasadata.csv")
library(iplots)
tips <- read.csv("http://www.ggobi.org/book/data/tips.csv")
suppressMessages(library(peptider))
library(plyr)
n <- 10^(seq(6, 12, by=0.05))
libs$scheme <- factor(libs$scheme, levels=c("Maximal", "Trimer", "NNK", "NNB", "NNN"))
levels(libs$scheme)[3] <- "NNK/S"
library(MakeRV)
k <- 9
libs <- ldply(c("Trimer", "NNB", "NNK", "NNN"), function(scheme) {
lib <- get(scheme)(k)
lib.stats <- ldply(n, function(x) {
cov = coverage(k=k, libscheme=get(scheme), N=x, lib=lib)
eff = efficiency(k=k, libscheme=get(scheme), N=x, lib=lib)
lib.stats$scheme <- scheme
lib.stats
libs2 <- ldply(n, function(x) {
cov = min(x/19^k,1)
eff = 1
c(k=k, n=x, cov=cov, eff=eff)
})
libs2$scheme <- "Maximal"
libs <- rbind(libs, libs2)
head(libs)
head(Y3)
head(Y)
Y
316/4
6*20+3+6
detach(package:discreteRV)
Y <- make.RV(1:3, 1:3)
Y3 <- multN(Y, 3)
Y3
multN
library(RMySQL)
DataBase.Driver <- dbDriver("MySQL")#
DataBase.Connection <- dbConnect(DataBase.Driver, user="2009Expo", password="R R0cks", port=3306, dbname="accidents", host="headnode.stat.iastate.edu")
DataBase.Driver <- dbDriver("MySQL")#
db <- dbConnect(DataBase.Driver, user="2009Expo", password="R R0cks", port=3306, dbname="accidents", host="headnode.stat.iastate.edu")
dbGetTables(db)
dbGetTable(db)
dbGetFields(db)
help(dbGetFields)
help(dbFields)
dbTables(db)
help(dbConnect)
dbListTables(db)
dbListFields(db, "accidents")
library(XML)
eurovision13 <- readHTMLTable("http://www.eurovision.tv/page/history/by-year/contest?event=1773")
head(eurovision13)
library(ggplot2)#
library(grid)#
library(reshape2)#
library(plyr)#
fc.summary <- read.csv(file.choose())
fc.summary$fc.b0 <- fc.summary$fc.b0 * fc.summary$s_int#
fc.summary$fc.b1 <- fc.summary$fc.b1 * fc.summary$s_slope#
#
fc.summary$fc.b0 <- fc.summary$fc.b0 / 60#
fc.summary$fc.b1 <- fc.summary$fc.b1 / 60#
fc.melted <- melt(fc.summary, id.vars=c("sigma_e", "sigma_b", "e_dsn", "b_dsn", "s_int", "s_slope"), value.name = "fc")#
fc.melted$`Var. structure` <- with(fc.melted, interaction(sigma_e, sigma_b), drop = T)#
fc.melted$`Var. structure` <- factor(fc.melted$`Var. structure`, levels = levels(fc.melted$`Var. structure`)[c(2,1,3,4)])#
levels(fc.melted$variable) <- c("intercept", "slope")#
fc.melted$s <- NA#
fc.melted$s[fc.melted$variable == "intercept"] <- fc.melted$s_int[fc.melted$variable == "intercept"]#
fc.melted$s[fc.melted$variable == "slope"] <- fc.melted$s_slope[fc.melted$variable == "slope"]#
qplot(x = s, y = fc, data = fc.melted, geom = c("point"), group = `Var. structure`,  colour = `Var. structure`, facets = ~ variable,  linetype = `Var. structure`, size=I(2.5), shape=b_dsn) + #
xlim(30, 60) + #
scale_color_brewer("Variance structure", palette="Set2", labels = c(expression(paste(sigma[epsilon]^2==4, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==4)))) + #
scale_linetype_discrete("Variance structure", labels = c(expression(paste(sigma[epsilon]^2==4, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==1)), expression(paste(sigma[epsilon]^2==1, ", ", sigma[b]^2==4)))) + #
xlab("s") + ylab("fraction of confounding") + theme_bw() + #
theme(legend.position="bottom", legend.key.width = unit(3, "line")) + geom_line(aes(group=interaction(e_dsn, b_dsn, `Var. structure`))) + scale_shape_manual("Random Effects", values=c(1, 17, 15), labels = c("Exponential", "Normal", expression(t[3])))
library(ggplot2)#
library(plyr)#
propreject <- read.csv(file.choose())   #
load(file.choose())
goldstandard <- ldply(results.05, identity)#
goldstandard$n <- rep(30:59, each = 3)
qplot(x = s, y = prop.reject, data = subset(propreject, subset = ranef == "norm" & nortest == "AD" &  alpha == 0.05 & random.effect == "b0" & var.settings == "sige2_sigb1" & rotation != "EBLUP"), geom = c("point", "smooth"), colour = error, group = error, linetype = error, se = F, method = "lm") + #
facet_grid(. ~ rotation, scales = "free") + #
xlab("s") +#
ylab("proportion of tests rejected") + #
scale_linetype_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + 	scale_color_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"))
qplot(x = s, y = prop.reject, data = subset(propreject, subset = ranef == "norm" & nortest == "AD" &  alpha == 0.05 & random.effect == "b1" & var.settings == "sige2_sigb1" & rotation != "EBLUP"), geom = c("point", "smooth"), colour = error, group = error, linetype = error, se = F, method = "lm") + #
facet_grid(. ~ rotation, scales = "free") + #
xlab("s") +#
ylab("proportion of tests rejected") + #
scale_linetype_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + 	scale_color_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + #
ylim(0, .4)
qplot(x = s, y = prop.reject, data = subset(propreject, subset = ranef == "norm" & nortest == "AD" &  alpha == 0.05 & random.effect == "b1" & var.settings == "sige2_sigb1" & rotation != "EBLUP"), geom = c("point", "smooth"), colour = error, group = error, linetype = error, se = F, method = "lm")
qplot(x = s, y = prop.reject, data = subset(propreject, subset = ranef == "norm" & nortest == "AD" &  alpha == 0.05 & random.effect == "b1" & var.settings == "sige2_sigb1" & rotation != "EBLUP"), geom = c("point", "smooth"), colour = error, group = error, linetype = error, se = F, method = "lm") + #
facet_grid(. ~ rotation, scales = "free")
qplot(x = s, y = prop.reject, data = subset(propreject, subset = ranef == "norm" & nortest == "AD" &  alpha == 0.05 & random.effect == "b1" & var.settings == "sige2_sigb1" & rotation != "EBLUP"), geom = c("point", "smooth"), colour = error, group = error, linetype = error, se = F, method = "lm") + #
facet_grid(. ~ rotation, scales = "free") + #
xlab(expression('subspace dimension'*s))
qplot(x = s, y = prop.reject, data = subset(propreject, subset = ranef == "norm" & nortest == "AD" &  alpha == 0.05 & random.effect == "b1" & var.settings == "sige2_sigb1" & rotation != "EBLUP"), geom = c("point", "smooth"), colour = error, group = error, linetype = error, se = F, method = "lm") + #
facet_grid(. ~ rotation, scales = "free") + #
xlab("subspace dimension s")
library(RColorBrewer)
qplot(x = s, y = prop.reject, data = subset(propreject, subset = ranef == "norm" & nortest == "AD" &  alpha == 0.05 & random.effect == "b1" & var.settings == "sige2_sigb1" & rotation != "EBLUP"), geom = c("point", "smooth"), colour = error, group = error, linetype = error, se = F, method = "lm") + #
facet_grid(. ~ rotation, scales = "free") + #
xlab("subspace dimension s") +#
ylab("proportion of tests rejected") + #
scale_linetype_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + 	scale_brewer_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), palette="Set2") + #
ylim(0, .4)
qplot(x = s, y = prop.reject, data = subset(propreject, subset = ranef == "norm" & nortest == "AD" &  alpha == 0.05 & random.effect == "b1" & var.settings == "sige2_sigb1" & rotation != "EBLUP"), geom = c("point", "smooth"), colour = error, group = error, linetype = error, se = F, method = "lm") + #
facet_grid(. ~ rotation, scales = "free") + #
xlab("subspace dimension s") +#
ylab("proportion of tests rejected") + #
scale_linetype_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + 	scale_color_brewer("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), palette="Set2") + #
ylim(0, .4)
ggplot(data = subset(propreject, subset = ranef == "norm" & nortest == "AD" &  alpha == 0.05 & random.effect == "b1" & var.settings == "sige2_sigb1" & rotation != "EBLUP"),#
aes(x=s, y=prop.reject, colour=error, group=error, linetype=error, shape=error)) + #
geom_point(size=2.5) + geom_smooth(se=FALSE, method="lm") + #
facet_grid(. ~ rotation, scales = "free") + #
xlab("subspace dimension s") +#
ylab("proportion of tests rejected") + #
scale_linetype_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + 	scale_color_brewer("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), palette="Set2") + #
ylim(0, .4)
ggplot(data = subset(propreject, subset = ranef == "norm" & nortest == "AD" &  alpha == 0.05 & random.effect == "b1" & var.settings == "sige2_sigb1" & rotation != "EBLUP"),#
aes(x=s, y=prop.reject, colour=error, group=error, linetype=error, shape=error)) + #
geom_point(size=2.5) + geom_smooth(se=FALSE, method="lm") + #
facet_grid(. ~ rotation, scales = "free") + #
xlab("subspace dimension s") +#
ylab("proportion of tests rejected") + #
scale_linetype_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + 	scale_color_brewer("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), palette="Set2") + theme(legend.position="bottom", legend.key.width = unit(3, "line"))  + #
ylim(0, .4)
ggplot(data = subset(propreject, subset = ranef == "norm" & nortest == "AD" &  alpha == 0.05 & random.effect == "b1" & var.settings == "sige2_sigb1" & rotation != "EBLUP"),#
aes(x=s, y=prop.reject, colour=error, group=error, linetype=error, shape=error)) + #
geom_point(size=2.5) + geom_smooth(se=FALSE, method="lm") + #
facet_grid(. ~ rotation, scales = "free") + #
xlab("subspace dimension s") +#
ylab("proportion of tests rejected") + #
scale_shape("Error distribution") +#
scale_linetype_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + 	scale_color_brewer("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), palette="Set2") + theme(legend.position="bottom", legend.key.width = unit(3, "line"))  + #
ylim(0, .4)
ggplot(data = subset(propreject, subset = ranef == "norm" & nortest == "AD" &  alpha == 0.05 & random.effect == "b1" & var.settings == "sige2_sigb1" & rotation != "EBLUP"),#
aes(x=s, y=prop.reject, colour=error, group=error, linetype=error, shape=error)) + #
geom_point(size=2.5) + geom_smooth(se=FALSE, method="lm") + #
facet_grid(. ~ rotation, scales = "free") + #
xlab("subspace dimension s") +#
ylab("proportion of tests rejected") + #
scale_shape("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) +#
scale_linetype_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + 	scale_color_brewer("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), palette="Set2") + theme(legend.position="bottom", legend.key.width = unit(3, "line"))  + #
ylim(0, .4)
ggplot(data = subset(propreject, subset = ranef == "norm" & nortest == "AD" &  alpha == 0.05 & random.effect == "b1" & var.settings == "sige2_sigb1" & rotation != "EBLUP"),#
aes(x=s, y=prop.reject, colour=error, group=error, linetype=error, shape=error)) + #
geom_point(size=2.5) + geom_smooth(se=FALSE, method="lm") + #
facet_grid(. ~ rotation, scales = "free") + #
xlab("subspace dimension s") +#
ylab("proportion of tests rejected") + #
scale_shape("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), values=c(1, 17, 15)) +#
scale_linetype_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + 	scale_color_brewer("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), palette="Set2") + theme(legend.position="bottom", legend.key.width = unit(3, "line"))  + #
ylim(0, .4)
ggplot(data = subset(propreject, subset = ranef == "norm" & nortest == "AD" &  alpha == 0.05 & random.effect == "b1" & var.settings == "sige2_sigb1" & rotation != "EBLUP"),#
aes(x=s, y=prop.reject, colour=error, group=error, linetype=error, shape=error)) + #
geom_point(size=2.5) + geom_smooth(se=FALSE, method="lm") + #
facet_grid(. ~ rotation, scales = "free") + #
xlab("subspace dimension s") +#
ylab("proportion of tests rejected") + #
scale_shape_manual("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), values=c(1, 17, 15)) +#
scale_linetype_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + 	scale_color_brewer("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), palette="Set2") + theme(legend.position="bottom", legend.key.width = unit(3, "line"))  + #
ylim(0, .4)
ggplot(data = subset(propreject, subset = ranef == "norm" & nortest == "AD" &  alpha == 0.05 & random.effect == "b1" & var.settings == "sige2_sigb1" & rotation != "EBLUP"),#
aes(x=s, y=prop.reject, colour=error, group=error, linetype=error, shape=error)) + #
geom_point(size=2.5) + geom_smooth(se=FALSE, method="lm") + #
facet_grid(. ~ rotation, scales = "free") + #
xlab("subspace dimension s") +#
ylab("proportion of tests rejected") + #
scale_shape_manual("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), values=c(1, 17, 15)) +#
scale_linetype_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + 	scale_color_brewer("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), palette="Set2") + theme(legend.position="bottom", legend.key.width = unit(3, "line"))  + #
ylim(0, .4) + theme_bw()
ggplot(data = subset(propreject, subset = ranef == "norm" & nortest == "AD" &  alpha == 0.05 & random.effect == "b1" & var.settings == "sige2_sigb1" & rotation != "EBLUP"),#
aes(x=s, y=prop.reject, colour=error, group=error, linetype=error, shape=error)) + #
geom_point(size=2.5) + geom_smooth(se=FALSE, method="lm") + #
facet_grid(. ~ rotation, scales = "free") + #
xlab("subspace dimension s") +#
ylab("proportion of tests rejected") + theme_bw() +#
scale_shape_manual("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), values=c(1, 17, 15)) +#
scale_linetype_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + 	scale_color_brewer("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), palette="Set2") + theme(legend.position="bottom", legend.key.width = unit(3, "line"))  + #
ylim(0, .4)
qplot(x = s, y = prop.reject, data = subset(propreject, subset = ranef != "norm" & random.effect == "b0" & nortest == "AD" & var.settings == "sige2_sigb1" & alpha == 0.05 & rotation != "EBLUP"), geom = c("point", "smooth"), facets = ~ rotation, linetype = ranef, colour = error, group = interaction(error, ranef), se = F, method = "lm") + #
xlab("s") + #
ylab("proportion of tests rejected") + #
theme_bw() + #
scale_color_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + #
scale_linetype_discrete("Random effects\ndistribution", labels = c("Skewed", "Heavy tailed"))
qplot(x = s, y = prop.reject, data = subset(propreject, subset = ranef != "norm" & random.effect == "b0" & nortest == "AD" & var.settings == "sige2_sigb1" & alpha == 0.05 & rotation != "EBLUP"), geom = c("point", "smooth"), facets = ~ rotation, linetype = ranef, colour = error, group = interaction(error, ranef), se = F, method = "lm") + #
geom_line(aes(x = n, y = AD, group = .id), data = subset(goldstandard, .id != "normal"), inherit.aes = FALSE) + #
xlab("s") + #
ylab("proportion of tests rejected") + #
theme_bw() + #
scale_color_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + #
scale_linetype_discrete("Random effects\ndistribution", labels = c("Skewed", "Heavy tailed"))
ggplot(data = subset(propreject, subset = ranef == "norm" & nortest == "AD" &  alpha == 0.05 & random.effect == "b1" & var.settings == "sige2_sigb1" & rotation != "EBLUP"),#
aes(x=s, y=prop.reject, colour=error, group=error, linetype=error, shape=error)) + #
geom_point(size=2.5) + geom_smooth(se=FALSE, method="lm") + #
facet_grid(. ~ rotation, scales = "free") + #
xlab("subspace dimension s") +#
ylab("proportion of tests rejected") + theme_bw() +#
scale_shape_manual("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), values=c(1, 17, 15)) +#
scale_linetype_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + 	scale_color_brewer("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), palette="Set2") + theme(legend.position="bottom", legend.key.width = unit(3, "line"))  + #
ylim(0, .3)
ggplot(data = subset(propreject, subset = ranef == "norm" & nortest == "AD" &  alpha == 0.05 & random.effect == "b1" & var.settings == "sige2_sigb1" & rotation != "EBLUP"),#
aes(x=s, y=prop.reject, colour=error, group=error, linetype=error, shape=error)) + #
geom_point(size=2.5) + geom_smooth(se=FALSE, method="lm") + #
facet_grid(. ~ rotation, scales = "free") + #
xlab("subspace dimension s") +#
ylab("proportion of tests rejected") + theme_bw() +#
scale_shape_manual("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), values=c(1, 17, 15)) +#
scale_linetype_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + 	scale_color_brewer("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), palette="Set2") + theme(legend.position="bottom", legend.key.width = unit(3, "line"))  + #
ylim(0, .25)
qplot(x = s, y = prop.reject, data = subset(propreject, subset = ranef != "norm" & random.effect == "b1" & nortest == "AD" & var.settings == "sige2_sigb1" & alpha == 0.05 & rotation != "EBLUP"), geom = c( "smooth"), facets = ~ rotation, colour = error, linetype = ranef, group = interaction(error, ranef), se = F, method = "lm") + #
geom_line(aes(x = n, y = AD, group = .id), data = subset(goldstandard, .id != "normal"), inherit.aes = FALSE) + #
xlab("s") + #
ylab("proportion of tests rejected") + #
theme_bw() + #
scale_color_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + #
scale_linetype_discrete("Random effects\ndistribution", labels = c("Skewed", "Heavy tailed"))
qplot(x = s, y = prop.reject, data = subset(propreject, subset = ranef != "norm" & random.effect == "b1" & nortest == "AD" & var.settings == "sige2_sigb1" & alpha == 0.05 & rotation != "EBLUP"), geom = c("point", "smooth"), facets = ~ rotation, colour = error, linetype = ranef, group = interaction(error, ranef), se = F, method = "lm") + #
xlab("s") + #
ylab("proportion of tests rejected") + #
theme_bw() + #
scale_color_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + #
scale_linetype_discrete("Random effects\ndistribution", labels = c("Skewed", "Heavy tailed"))
qplot(x = s, y = prop.reject, data = subset(propreject, subset = ranef != "norm" & random.effect == "b1" & nortest == "AD" & var.settings == "sige2_sigb1" & alpha == 0.05 & rotation != "EBLUP"), geom = c("point", "smooth"), facets = ~ rotation, colour = error, linetype = ranef, group = interaction(error, ranef), se = F, method = "lm") + #
xlab("s") + #
ylab("proportion of tests rejected") + #
theme_bw() + #
scale_color_brewer("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), palette="Set2") + #
scale_linetype_discrete("Random effects\ndistribution", labels = c("Skewed", "Heavy tailed"))#
+ theme_bw() +#
scale_shape_manual("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), values=c(1, 17, 15)) +#
scale_linetype_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + theme(legend.position="bottom", legend.key.width = unit(3, "line"))
ggplot(data = subset(propreject, subset = ranef != "norm" & random.effect == "b1" & nortest == "AD" & var.settings == "sige2_sigb1" & alpha == 0.05 & rotation != "EBLUP"),#
aes(x=s,y = prop.reject, colour=error, linetype=error, shape=error, group= interaction(error, ranef))) +#
geom_point(size=2.5) +geom_smooth(method="lm", se=F) +#
facet_wrap(~rotation) +#
xlab("s") + #
ylab("proportion of tests rejected") + #
theme_bw() + #
scale_color_brewer("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), palette="Set2") + #
scale_linetype_discrete("Random effects\ndistribution", labels = c("Skewed", "Heavy tailed"))#
+ theme_bw() +#
scale_shape_manual("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), values=c(1, 17, 15)) +#
scale_linetype_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + theme(legend.position="bottom", legend.key.width = unit(3, "line"))
ggplot(data = subset(propreject, subset = ranef != "norm" & random.effect == "b1" & nortest == "AD" & var.settings == "sige2_sigb1" & alpha == 0.05 & rotation != "EBLUP"),#
aes(x=s,y = prop.reject, colour=error, linetype=error, shape=error, group= interaction(error, ranef))) +#
geom_point(size=2.5) +geom_smooth(method="lm", se=F)
ggplot(data = subset(propreject, subset = ranef != "norm" & random.effect == "b1" & nortest == "AD" & var.settings == "sige2_sigb1" & alpha == 0.05 & rotation != "EBLUP"),#
aes(x=s,y = prop.reject, colour=error, linetype=error, shape=error, group= interaction(error, ranef))) +#
geom_point(size=2.5) +geom_smooth(method="lm", se=F) +#
facet_wrap(~rotation)
ggplot(data = subset(propreject, subset = ranef != "norm" & random.effect == "b1" & nortest == "AD" & var.settings == "sige2_sigb1" & alpha == 0.05 & rotation != "EBLUP"),#
aes(x=s,y = prop.reject, colour=error, linetype=error, shape=error, group= interaction(error, ranef))) +#
geom_point(size=2.5) +geom_smooth(method="lm", se=F) +#
facet_wrap(~rotation) +#
xlab("subspace dimension s") + #
ylab("proportion of tests rejected") + #
theme_bw()
ggplot(data = subset(propreject, subset = ranef != "norm" & random.effect == "b1" & nortest == "AD" & var.settings == "sige2_sigb1" & alpha == 0.05 & rotation != "EBLUP"),#
aes(x=s,y = prop.reject, colour=error, linetype=error, shape=error, group= interaction(error, ranef))) +#
geom_point(size=2.5) +geom_smooth(method="lm", se=F) +#
facet_wrap(~rotation) +#
xlab("subspace dimension s") + #
ylab("proportion of tests rejected") + #
theme_bw() + #
scale_color_brewer("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), palette="Set2")
ggplot(data = subset(propreject, subset = ranef != "norm" & random.effect == "b1" & nortest == "AD" & var.settings == "sige2_sigb1" & alpha == 0.05 & rotation != "EBLUP"),#
aes(x=s,y = prop.reject, colour=error, linetype=error, shape=error, group= interaction(error, ranef))) +#
geom_point(size=2.5) +geom_smooth(method="lm", se=F) +#
facet_wrap(~rotation) +#
xlab("subspace dimension s") + #
ylab("proportion of tests rejected") + #
theme_bw() + #
scale_color_brewer("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), palette="Set2") + #
scale_linetype_discrete("Random effects\ndistribution", labels = c("Skewed", "Normal", "Heavy tailed"))
ggplot(data = subset(propreject, subset = ranef != "norm" & random.effect == "b1" & nortest == "AD" & var.settings == "sige2_sigb1" & alpha == 0.05 & rotation != "EBLUP"),#
aes(x=s,y = prop.reject, colour=error, linetype=error, shape=error, group= interaction(error, ranef))) +#
geom_point(size=2.5) +geom_smooth(method="lm", se=F) +#
facet_wrap(~rotation) +#
xlab("subspace dimension s") + #
ylab("proportion of tests rejected") + #
theme_bw() + #
scale_color_brewer("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), palette="Set2") + #
scale_linetype_discrete("Random effects\ndistribution", labels = c("Skewed", "Normal", "Heavy tailed")) + theme_bw() +#
scale_shape_manual("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), values=c(1, 17, 15)) +#
scale_linetype_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + theme(legend.position="bottom", legend.key.width = unit(3, "line"))
ggplot(data = subset(propreject, subset = ranef != "norm" & random.effect == "b1" & nortest == "AD" & var.settings == "sige2_sigb1" & alpha == 0.05 & rotation != "EBLUP"),#
aes(x=s,y = prop.reject, colour=error, linetype=ranef, shape=error, group= interaction(error, ranef))) +#
geom_point(size=2.5) +geom_smooth(method="lm", se=F) +#
facet_wrap(~rotation) +#
xlab("subspace dimension s") + #
ylab("proportion of tests rejected") + #
theme_bw() + #
scale_color_brewer("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), palette="Set2") + #
scale_linetype_discrete("Random effects\ndistribution", labels = c("Skewed", "Heavy tailed")) + theme_bw() +#
scale_shape_manual("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), values=c(1, 17, 15)) +#
scale_linetype_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + theme(legend.position="bottom", legend.key.width = unit(3, "line"))
ggplot(data = subset(propreject, subset = ranef != "norm" & random.effect == "b1" & nortest == "AD" & var.settings == "sige2_sigb1" & alpha == 0.05 & rotation != "EBLUP"),#
aes(x=s,y = prop.reject, colour=error, linetype=ranef, shape=error, group= interaction(error, ranef))) +#
geom_point(size=2.5) +geom_smooth(method="lm", se=F) +#
facet_wrap(~rotation) +#
xlab("subspace dimension s") + #
ylab("proportion of tests rejected") + #
theme_bw() + #
scale_color_brewer("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), palette="Set2") + #
scale_linetype_discrete("Random effects\ndistribution", labels = c("Skewed", "Heavy tailed")) + theme_bw() +#
scale_shape_manual("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), values=c(1, 17, 15)) + theme(legend.position="bottom", legend.key.width = unit(3, "line"))
ggplot(data = subset(propreject, subset = ranef != "norm" & random.effect == "b1" & nortest == "AD" & var.settings == "sige2_sigb1" & alpha == 0.05 & rotation != "EBLUP"),#
aes(x=s,y = prop.reject, colour=error, linetype=ranef, shape=error, group= interaction(error, ranef))) +#
geom_point(size=2.5) +geom_smooth(method="lm", se=F) +#
facet_wrap(~rotation) +#
xlab("subspace dimension s") + #
ylab("proportion of tests rejected") + #
theme_bw() + #
scale_color_brewer("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), palette="Set2") + #
scale_linetype_discrete("Random effects\ndistribution", labels = c("Skewed", "Heavy tailed")) + theme_bw() +#
scale_shape_manual("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), values=c(1, 17, 15)) + theme(legend.position="bottom", legend.key.width = unit(3, "line"))   + ylim(c(0,0.4))
ggplot(data = subset(propreject, subset = ranef == "norm" & nortest == "AD" &  alpha == 0.05 & random.effect == "b1" & var.settings == "sige2_sigb1" & rotation != "EBLUP"),#
aes(x=s, y=prop.reject, colour=error, group=error, linetype=error, shape=error)) + #
geom_point(size=3) + geom_smooth(size=1, se=FALSE, method="lm") + #
facet_grid(. ~ rotation, scales = "free") + #
xlab("subspace dimension s") +#
ylab("proportion of tests rejected") + theme_bw() +#
scale_shape_manual("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), values=c(1, 17, 15)) +#
scale_linetype_discrete("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed")) + 	scale_color_brewer("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), palette="Set2") + theme(legend.position="bottom", legend.key.width = unit(3, "line"))  + #
ylim(0, .25)
ggsave("ad_slope_results.pdf", width=8, height=5)
ggplot(data = subset(propreject, subset = ranef != "norm" & random.effect == "b1" & nortest == "AD" & var.settings == "sige2_sigb1" & alpha == 0.05 & rotation != "EBLUP"),#
aes(x=s,y = prop.reject, colour=error, linetype=ranef, shape=error, group= interaction(error, ranef))) +#
geom_point(size=3) +geom_smooth(method="lm", size=1, se=F) +#
facet_wrap(~rotation) +#
xlab("subspace dimension s") + #
ylab("proportion of tests rejected") + #
theme_bw() + #
scale_color_brewer("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), palette="Set2") + #
scale_linetype_discrete("Random effects\ndistribution", labels = c("Skewed", "Heavy tailed")) + theme_bw() +#
scale_shape_manual("Error distribution", labels = c("Skewed", "Normal", "Heavy tailed"), values=c(1, 17, 15)) + theme(legend.position="bottom", legend.key.width = unit(3, "line"))   + ylim(c(0,0.4))
ggsave("ad_slope_power.pdf", width=8, height=5.5)
source("http://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library(DESeq2)
library(devtools)
help(install)
install("/Users/heike/Desktop/downloads/DESeq2/")
getwd()
library(peptider)
help(discreteRV)
library(help=discreteRV)
library(discreteRV)
NNN(1)
load(file.choose())
library(ggplot2)#
library(lme4)     #
library(HLMdiag)  #
library(nullabor) #
library(plyr)#
library(reshape2)#
library(stringr)#
library(mvtnorm)
BlockZ <- function(object) {#
  Z <- getME(object, "Z")#
  grp.size <- table(object@flist)#
  ngrps <- length(grp.size)#
  nranef <- dim(ranef(object)[[1]])[2]#
  base.ord <- seq(from = 1, by = ngrps, length.out = nranef)#
  ord <- base.ord + rep(0:(ngrps - 1), each = nranef)#
  perm.mat <- t(as(ord, "pMatrix"))#
  return(Z %*% perm.mat)#
}
lev2.marginal.var <- function(.model) {#
  y <- .model@y#
  X <- getME(.model, "X")#
  Z <- BlockZ(.model)#
  n <- nrow(X)#
  ngrps <- unname(sapply(.model@flist, function(x) length(levels(x))))#
  sig0 <- attr(VarCorr(.model), "sc") #
  ZDZt <- sig0^2 * crossprod( .model@A )#
  R    <- Diagonal( n = n, x = sig0^2 )#
  D    <- kronecker( Diagonal(ngrps), bdiag(VarCorr(.model)) )#
  V    <- Diagonal(n) + ZDZt#
  V.chol <- chol( V )#
  Vinv   <- chol2inv( V.chol )#
#
  bse <- crossprod( chol(Vinv) %*% Z %*% D ) #
  bse.diag <- diag(bse)#
#
  semat <- matrix(sqrt(bse.diag), ncol = 2, byrow = TRUE)#
#
  return(semat)#
}#
#
std_ranef <- function(.model) {#
	res <- ranef(.model)[[1]]#
	semat <- lev2.marginal.var(.model)#
	RVAL <- res / semat#
	return(RVAL)#
}#
#
sim_env <- function(x, conf = .95){#
  n <- length(x)#
  P <- ppoints(x)#
  z <- qnorm(P)#
  a <- as.numeric(HLMdiag:::qqlineInfo(x)[1])#
  b <- as.numeric(HLMdiag:::qqlineInfo(x)[2])#
  zz <- qnorm(1 - (1 - conf)/2)#
  SE <- (b/dnorm(z)) * sqrt(P * (1 - P)/n)#
  fit.value <- a + b * z#
  upper <- fit.value + zz * SE#
  lower <- fit.value - zz * SE#
  return(data.frame(lower, upper))#
}#
#
sim_t_hlm <- function(.mod) {#
	vc <- VarCorr( .mod )#
	D  <- as.matrix( bdiag(vc) )#
	sig.e <- sigma(.mod)#
	dims <- .mod@dims#
	n <- dims[["n"]]#
	m <- dims[["q"]] / nrow(D)#
	e  <- rnorm(n = n, mean = 0, sd = sig.e)#
	b <- rmvt(n = m, sigma = D, df = 3)#
	bvec <- c(b[,1], b[,2])#
	y <- getME(.mod, "X") %*% fixef(.mod) + getME(.mod, "Z") %*% bvec + e#
	return( as.numeric(y) )#
}#
#
sim_indep_ranef_hlm <- function(.mod, nsim, e.dsn, b0.dsn, b1.dsn, sigma.err, sigma.b0, sigma.b1){#
  vc <- VarCorr( .mod )#
	dims <- .mod@dims#
	n <- dims[["n"]]#
	m <- dims[["q"]] / dims[["nt"]]#
	if(e.dsn == "norm") {#
		e  <- rnorm(n = nsim * n, mean = 0, sd = sigma.err)#
	} #
	if(e.dsn == "t") {#
		e  <- (sigma.err / sqrt(3)) * rt(n = nsim * n, df = 3)#
	}#
	if(e.dsn == "exp") {#
		e  <- sigma.err * ( rexp(n = nsim * n) - 1 )#
	}#
	e <- matrix(e, nc = nsim)#
	if(b0.dsn == "norm") {#
		b0  <- rnorm(n = nsim * m, mean = 0, sd = sigma.b0)#
	} #
	if(b0.dsn == "t") {#
		b0  <- (sigma.b0 / sqrt(3)) * rt(n = nsim * m, df = 3)#
	}#
	if(b0.dsn == "exp") {#
		b0  <- sigma.b0 * ( rexp(n = nsim * m) - 1 )#
	}#
	b0 <- matrix(b0, nc = nsim)#
	if(b1.dsn == "norm") {#
		b1  <- rnorm(n = nsim * m, mean = 0, sd = sigma.b1)#
	} #
	if(b1.dsn == "t") {#
		b1  <- (sigma.b1 / sqrt(3)) * rt(n = nsim * m, df = 3)#
	}#
	if(b1.dsn == "exp") {#
		b1  <- sigma.b1 * ( rexp(n = nsim * m) - 1 )#
	}#
	b1 <- matrix(b1, nc = nsim)#
	b <- rbind(b0, b1)#
	y <- getME(.mod, "X") %*% fixef(.mod) + getME(.mod, "Z") %*% b + e#
	y.df <- as.data.frame( as.matrix( y) )#
	colnames(y.df) <- paste("sim_", 1:ncol(y.df), sep = "")#
	return( y.df )#
#
}
radon <- read.csv(file.choose())
decrypt("P2SX 6lal Y8 5GhYaYG8 Fd")
fm <- lmer(log.radon ~ basement + uranium + (basement | county), data = radon)#
#
b <- ranef(fm)[[1]] #
#
sim.y   <- simulate(fm, nsim = 19, seed = 987654321)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            #
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   #
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           #
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  #
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0[complete.cases(sim.b0),], .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- transform(b, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   #
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           #
names(sim.b1) <- c("sample", "basement")                  #
sim.b1        <- arrange(sim.b1, sample)                  #
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1[complete.cases(sim.b1),], .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b1 <- transform(b, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
fm <- lmer(log.radon ~ basement + uranium + (1 | county) + (basement - 1 | county), data = radon)#
b <- ranef(fm)[[1]] #
#
sim.y   <- sim_indep_ranef_hlm(fm, nsim = 20, e.dsn = "norm", #
	b0.dsn = "norm", b1.dsn = "norm", sigma.err = 2, sigma.b0 = 1, sigma.b1 = 1)                        #
#
sim.mod <- apply(sim.y, 2, refit, object = fm)            #
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   #
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           #
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  #
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0, .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- subset(sim.b0, .n == 20)#
sim.b0 <- sim.b0[-which(sim.b0$.n == 20),] #
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 R")
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   #
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           #
names(sim.b1) <- c("sample", "basement")                  #
sim.b1        <- arrange(sim.b1, sample)                  #
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1, .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b1 <- subset(sim.b1, .n == 20)#
sim.b1 <- sim.b1[-which(sim.b1$.n == 20),] #
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
library(ggplot2)#
library(lme4)#
library(HLMdiag)#
library(foreign)#
library(stringr)#
library(HLMdiag)#
library(nullabor)#
library(plyr)#
library(reshape2)#
#
data.lineup.explvar1 <- function(null.model, variable, data, nsim = 19, std = FALSE) {#
	mod.sims  <- simulate(null.model, nsim = nsim)#
	mod.refit <- lapply(mod.sims, refit, object = null.model)#
	if(std){#
		mod.sim.resid <- lapply(mod.refit, HLMresid, level = 1, standardize = TRUE)#
	} else{#
		mod.sim.resid <- lapply(mod.refit, resid)#
	}#
#
	mod.sim.resid <- do.call("cbind", mod.sim.resid)#
	mod.sim.resid <- melt(mod.sim.resid)[,-1]#
	names(mod.sim.resid) <- c(".n", "residual")#
	mod.sim.resid$.n <- as.numeric(str_extract(mod.sim.resid $.n, "\\d+"))#
	mod.sim.resid <- cbind(mod.sim.resid, data[, variable])#
	names(mod.sim.resid)[-c(1:2)] <- variable#
	return(mod.sim.resid)#
}#
library(WWGbook)#
autism$sicdegp.f <- factor(autism$sicdegp, labels = c("low", "med", "high"))#
autism$age.f     <- factor(autism$age)#
autism <- na.omit(autism)#
autism$age.2 <- autism$age - 2#
autism$sicdegp2 <- relevel(autism$sicdegp.f, ref = 3)#
qplot(x = age, y = vsae, data = autism, geom = "line", group = childid, alpha = I(0.3))#
qplot(x = age, y = vsae, data = autism, geom = "line", group = childid, facets = ~ sicdegp.f, alpha = I(0.3))#
(mod1 <- lmer(vsae ~ age.2 + (age.2 - 1 | childid), data = autism))#
mod2 <- lmer(vsae ~ age.2 + (age.2 + I(age.2^2) - 1 | childid), data = autism)#
anova(mod1, mod2)#
mod1.sims  <- simulate(mod1, nsim = 19, seed = 12345)#
mod1.refit <- lapply(mod1.sims, refit, object = mod1)#
mod1.sim.y <- lapply(mod1.refit, function(x) x@y)#
#
mod1.sim.y <- do.call("cbind", mod1.sim.y)#
mod1.sim.y <- melt(mod1.sim.y)[,-1]#
names(mod1.sim.y) <- c(".n", "y")#
mod1.sim.y$y[mod1.sim.y$y < 0] <- 0#
mod1.sim.y$.n <- as.numeric(str_extract(mod1.sim.y$.n, "\\d+"))#
mod1.sim.y$vsae <- rep(autism$vsae, rep = 19)#
mod1.sim.y$childid <- rep(autism$childid, rep = 19)#
mod1.sim.y$age.2 <- rep(autism$age.2, rep = 19)#
#
autism.true.y <- data.frame(y = autism$vsae, age.2 = autism$age.2, childid = autism$childid)#
#
qplot(x = age.2, y = y, data = autism.true.y, group = childid, geom = "line", se=F, alpha = I(0.3)) %+% lineup(true = autism.true.y, samples = mod1.sim.y) + facet_wrap( ~ .sample, ncol=5) + ylab("VSAE") + xlab("age - 2")
mod2.sims  <- simulate(mod2, nsim = 19)#
mod2.refit <- lapply(mod2.sims, refit, object = mod2)#
mod2.sim.y <- lapply(mod2.refit, function(x) x@y)#
#
mod2.sim.y <- do.call("cbind", mod2.sim.y)#
mod2.sim.y <- melt(mod2.sim.y)[,-1]#
names(mod2.sim.y) <- c(".n", "y")#
mod2.sim.y$y[mod2.sim.y$y < 0] <- 0#
mod2.sim.y$.n <- as.numeric(str_extract(mod2.sim.y$.n, "\\d+"))#
mod2.sim.y$vsae <- rep(autism$vsae, rep = 19)#
mod2.sim.y$childid <- rep(autism$childid, rep = 19)#
mod2.sim.y$age.2 <- rep(autism$age.2, rep = 19)#
qplot(x = age.2, y = y, data = autism.true.y, group = childid, geom = "line", se=F, alpha = I(0.3)) %+% lineup(true = autism.true.y, samples = mod2.sim.y) + facet_wrap( ~ .sample, ncol=5) + ylab("VSAE") + xlab("age - 2")
decrypt("P2SX 6lal Y8 5GhYaYG8 9")
location <- sample(20, 1)
library(grid)
qplot(x = age.2, y = y, data = autism.true.y, group = childid, geom = "line", se=F, alpha = I(0.3)) %+% lineup(true = autism.true.y, samples = mod2.sim.y, pos=location) + facet_wrap( ~ .sample, ncol=5) +#
theme(plot.margin = unit(c(.1,.1,.1,.1), "cm"), axis.text.y = element_blank(),#
                 axis.text.x = element_blank(), axis.ticks.y = element_blank(), panel.grid.major.y = element_blank())
qplot(x = age.2, y = y, data = autism.true.y, group = childid, geom = "line", se=F, alpha = I(0.3)) %+% lineup(true = autism.true.y, samples = mod2.sim.y, pos=location) + facet_wrap( ~ .sample, ncol=5) +#
theme(plot.margin = unit(c(.1,.1,.1,.1), "cm"), axis.text.y = element_blank(),#
                 axis.text.x = element_blank(), axis.ticks.y = element_blank(), panel.grid.major.y = element_blank(), axis.title=element_blank())
axis.text.x = element_blank(), = element_blank(), panel.grid.major.y = element_blank(), axis.title=element_blank())
qplot(x = age.2, y = y, data = autism.true.y, group = childid, geom = "line", se=F, alpha = I(0.3)) %+% lineup(true = autism.true.y, samples = mod2.sim.y, pos=location) + facet_wrap( ~ .sample, ncol=5) +#
theme(plot.margin = unit(c(.1,.1,.1,.1), "cm"), axis.text.y = element_blank(),#
                 axis.text.x = element_blank(), = element_blank(), panel.grid.major.y = element_blank(), axis.title=element_blank())
qplot(x = age.2, y = y, data = autism.true.y, group = childid, geom = "line", se=F, alpha = I(0.3)) %+% lineup(true = autism.true.y, samples = mod2.sim.y, pos=location) + facet_wrap( ~ .sample, ncol=5) +#
theme(plot.margin = unit(c(.1,.1,.1,.1), "cm"), axis.text.y = element_blank(),#
                 axis.text.x = element_blank(), panel.grid.major.y = element_blank(), #
                 axis.title=element_blank())
ggsave(sprintf("autism-fanned2-%s-multiple.svg", location)
)
source(file.choose())
make_interactive(filename= sprintf("autism-fanned2-%s-multiple.svg", location), #
		script="http://www.hofroe.net/examples/lineup/action.js")#
make_interactive(filename= sprintf("autism-fanned2-%s-single.svg", location), #
		script="http://www.hofroe.net/examples/lineup/action.js", toggle="toggle")
save(autism.true.y, mod2.sim.y, file="autism-fanned2.RData")
setwd("/Users/heike/papers/sociology_chapter/")
load('data/ahd.RData') #
library(lme4)#
library(HLMdiag)#
library(ggplot2)#
library(grid)#
library(plyr)#
library(MASS)#
#
model <- lmer(sbvalue ~ treatment + week*baseline + I(week^2)*baseline + #
  (0 + week + I(week^2) | subject), data = ahd)#
set.seed(123456789)#
sims <- simulate(model, nsim = 19)#
refit_fm <- apply(sims, 2, refit, object = model)#
sim_resids <- llply(refit_fm, function(x){#
	e <- resid(x)#
	subj <- x@frame$subject#
	return(data.frame(EB.resid = e, subject = subj))#
})#
#
true_resids <- data.frame(EB.resid = resid(model), subject = model@frame$subject)#
sim_resids <- ldply(refit_fm, function(x){#
	e <- resid(x)#
	subj <- x@frame$subject#
	return(data.frame(EB.resid = e, subject = subj))#
})#
#
true_resids <- data.frame(.id="true_20", EB.resid = resid(model), subject = model@frame$subject)
resids <- rbind(sim_resids, true_resids)#
resids$n <- as.numeric(gsub(".*_([0-9]+)", "\\1", as.character(resids$.id)))#
resids$sample <- sample(20,20, replace=FALSE)[resids$n]
head(resids)
resids <- ddply(resids, .(n, subject), transform, iqr=IQR(EB.resid))
resids <- ddply(resids, .(n), transform, rank = rank(iqr))
summary(resids$rank)
help(rank)
resids <- ddply(resids, .(n), transform, rank = rank(iqr, ties.method="random"))
summary(resids)
table(resids$rank)
qplot(x = factor(rank), y = EB.resid, data = resids, #
               geom = "boxplot", xlab = "", ylab = "", outlier.size = 1.5) + coord_flip() + #
                 ylim(-150, 150) + #
                 theme(plot.margin = unit(c(.1,.1,.1,.1), "cm"), axis.text.y = element_blank(),#
                 axis.text.x = element_blank(), axis.ticks.y = element_blank(), panel.grid.major.y = element_blank()) +#
				facet_wrap(~sample)
