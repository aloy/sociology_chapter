setwd("~/Documents/Thesis/Dissertation/sociology_chapter/")#
library(ggplot2)#
library(lme4)     # for modeling#
library(HLMdiag)  # for residuals#
library(nullabor) # for lineups#
library(plyr)#
library(reshape2)#
library(stringr)#
library(LearnBayes)#
#
BlockZ <- function(object) {#
  Z <- getME(object, "Z")#
  grp.size <- table(object@flist)#
  ngrps <- length(grp.size)#
  nranef <- dim(ranef(object)[[1]])[2]#
  base.ord <- seq(from = 1, by = ngrps, length.out = nranef)#
  ord <- base.ord + rep(0:(ngrps - 1), each = nranef)#
  perm.mat <- t(as(ord, "pMatrix"))#
  return(Z %*% perm.mat)#
}#
lev2.marginal.var <- function(.model) {#
  y <- .model@y#
  X <- getME(.model, "X")#
  Z <- BlockZ(.model)#
  n <- nrow(X)#
  ngrps <- unname(sapply(.model@flist, function(x) length(levels(x))))#
  # Constructing V = Cov(Y)#
  sig0 <- attr(VarCorr(.model), "sc") # sigma(.model)#
  ZDZt <- sig0^2 * crossprod( .model@A )#
  R    <- Diagonal( n = n, x = sig0^2 )#
  D    <- kronecker( Diagonal(ngrps), bdiag(VarCorr(.model)) )#
  V    <- Diagonal(n) + ZDZt#
  # Inverting V#
  V.chol <- chol( V )#
  Vinv   <- chol2inv( V.chol )#
#
  bse <- crossprod( chol(Vinv) %*% Z %*% D ) # Marginal COV. used by Lange and Ryan#
  bse.diag <- diag(bse)#
#
  semat <- matrix(sqrt(bse.diag), ncol = 2, byrow = TRUE)#
#
  return(semat)#
}#
#
std_ranef <- function(.model) {#
	res <- ranef(.model)[[1]]#
	semat <- lev2.marginal.var(.model)#
	RVAL <- res / semat#
	return(RVAL)#
}#
#
sim_env <- function(x, conf = .95){#
  n <- length(x)#
  P <- ppoints(x)#
  z <- qnorm(P)#
  a <- as.numeric(HLMdiag:::qqlineInfo(x)[1])#
  b <- as.numeric(HLMdiag:::qqlineInfo(x)[2])#
  zz <- qnorm(1 - (1 - conf)/2)#
  SE <- (b/dnorm(z)) * sqrt(P * (1 - P)/n)#
  fit.value <- a + b * z#
  upper <- fit.value + zz * SE#
  lower <- fit.value - zz * SE#
  return(data.frame(lower, upper))#
}#
#
sim_t_hlm <- function(.mod) {#
	vc <- VarCorr( .mod )#
	D  <- as.matrix( bdiag(vc) )#
	sig.e <- sigma(.mod)#
	dims <- .mod@dims#
	n <- dims[["n"]]#
	m <- dims[["q"]] / nrow(D)#
#
	## normal errors#
	e  <- rnorm(n = n, mean = 0, sd = sig.e)#
#
	## mutlivariate t random effects#
	b <- rmt(n = m, mean = c(0, 0), S = D, df = 3)#
	## Generating y#
	bvec <- c(b[,1], b[,2])#
	y <- getME(.mod, "X") %*% fixef(.mod) + getME(.mod, "Z") %*% bvec + e#
	return( as.numeric(y) )#
}#
#
sim_indep_ranef_hlm <- function(.mod, nsim, e.dsn, b0.dsn, b1.dsn, sigma.err, sigma.b0, sigma.b1){#
  vc <- VarCorr( .mod )#
	dims <- .mod@dims#
	n <- dims[["n"]]#
	m <- dims[["q"]] / dims[["nt"]]#
	## Simulating error terms#
	if(e.dsn == "norm") {#
		e  <- rnorm(n = nsim * n, mean = 0, sd = sigma.err)#
	} #
	if(e.dsn == "t") {#
		e  <- (sigma.err / sqrt(3)) * rt(n = nsim * n, df = 3)#
	}#
	if(e.dsn == "exp") {#
		e  <- sigma.err * ( rexp(n = nsim * n) - 1 )#
	}#
	e <- matrix(e, nc = nsim)#
	## Simulating random intercept#
	if(b0.dsn == "norm") {#
		b0  <- rnorm(n = nsim * m, mean = 0, sd = sigma.b0)#
	} #
	if(b0.dsn == "t") {#
		b0  <- (sigma.b0 / sqrt(3)) * rt(n = nsim * m, df = 3)#
	}#
	if(b0.dsn == "exp") {#
		b0  <- sigma.b0 * ( rexp(n = nsim * m) - 1 )#
	}#
	b0 <- matrix(b0, nc = nsim)#
#
	## Simulating random slope#
	if(b1.dsn == "norm") {#
		b1  <- rnorm(n = nsim * m, mean = 0, sd = sigma.b1)#
	} #
	if(b1.dsn == "t") {#
		b1  <- (sigma.b1 / sqrt(3)) * rt(n = nsim * m, df = 3)#
	}#
	if(b1.dsn == "exp") {#
		b1  <- sigma.b1 * ( rexp(n = nsim * m) - 1 )#
	}#
	b1 <- matrix(b1, nc = nsim)#
	## Generating y#
	b <- rbind(b0, b1)#
	y <- getME(.mod, "X") %*% fixef(.mod) + getME(.mod, "Z") %*% b + e#
	y.df <- as.data.frame( as.matrix( y) )#
	colnames(y.df) <- paste("sim_", 1:ncol(y.df), sep = "")#
	return( y.df )#
#
}#
radon <- read.csv("~/Documents/Thesis/Dissertation/eresids-chapter/minconfounded_chapter/data/radon_for_sims.csv")#
#
#-------------------------------------------------------------------------------#
# Q-Q plots -- observed radon data#
#-------------------------------------------------------------------------------#
fm <- lmer(log.radon ~ basement + uranium + (basement | county), data = radon)#
#
b <- std_ranef(fm) # notice that this is actually a matrix#
#
sim.y   <- simulate(fm, nsim = 19, seed = 9221632)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) std_ranef(x)[,1]) # ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0[complete.cases(sim.b0),], .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- transform(b, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
# Lineup of random intercepts#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
head(b0)
fm <- lmer(log.radon ~ basement + uranium + (basement | county), data = radon)#
#
b <- std_ranef(fm) # notice that this is actually a matrix#
#
sim.y   <- simulate(fm, nsim = 19, seed = 9221632)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) = ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0[complete.cases(sim.b0),], .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- transform(b, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0[complete.cases(sim.b0),], .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- transform(b, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))
Lineup of random intercepts#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
b <- fm # notice that this is actually a matrix
b0 <- transform(b, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))
b <- ranef(fm) # notice that this is actually a matrix
b0 <- transform(b, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))
b <- ranef(fm) # notice that this is actually a matrix
b0 <- transform(b, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))
fm <- lmer(log.radon ~ basement + uranium + (basement | county), data = radon)#
#
b <- ranef(fm) # notice that this is actually a matrix#
#
sim.y   <- simulate(fm, nsim = 19, seed = 9221632)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0[complete.cases(sim.b0),], .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- transform(b, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
# Lineup of random intercepts#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
head(sim.b0)
b <- ranef(fm)[[1]] # notice that this is actually a matrix
b0 <- transform(b, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))
Lineup of random intercepts#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 du")
sim.y   <- simulate(fm, nsim = 19, seed = 987654321)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0[complete.cases(sim.b0),], .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- transform(b, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
# Lineup of random intercepts#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 Fd")
sim.b1 <- llply(sim.mod, function(x) std_ranef(x)[,2]) # ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1[complete.cases(sim.b1),], .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b1 <- transform(b, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
# Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
sim.b1 <- llply(sim.mod, function(x) ranef(x)[,2]) # ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1[complete.cases(sim.b1),], .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b1 <- transform(b, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))
Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 R")
fm <- lmer(log.radon ~ basement + uranium + (1 | county) + (basement - 1 | county), data = radon)#
#
### INDEPENDENT RANDOM EFFECTS ####
#
b <- ranef(fm)[[1]] # notice that this is actually a matrix#
#
sim.y   <- sim_indep_ranef_hlm(fm, nsim = 20, e.dsn = "norm", #
	b0.dsn = "norm", b1.dsn = "norm", sigma.err = 2, sigma.b0 = 1, sigma.b1 = 1)                        #
# sim.y   <- simulate(fm, nsim = 20)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0, .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- subset(sim.b0, .n == 20)#
sim.b0 <- sim.b0[-which(sim.b0$.n == 20),]
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1, .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b1 <- subset(sim.b1, .n == 20)#
sim.b1 <- sim.b1[-which(sim.b1$.n == 20),] #
#
# Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
last_plot()
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 3")
sim.y   <- sim_indep_ranef_hlm(fm, nsim = 20, e.dsn = "norm", #
	b0.dsn = "norm", b1.dsn = "norm", sigma.err = 2, sigma.b0 = 1, sigma.b1 = 1)                        #
# sim.y   <- simulate(fm, nsim = 20)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0, .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- subset(sim.b0, .n == 20)#
sim.b0 <- sim.b0[-which(sim.b0$.n == 20),] #
#
# Lineup of random intercepts#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab(NULL) + ylab(NULL) + #
	theme(axis.text.y = element_blank(), axis.text.x = element_blank(),#
	axis.ticks.x = element_blank(), axis.ticks.y = element_blank())
decrypt("P2SX 6lal Y8 5GhYaYG8 FE")
ggsave("figures/qqplot_allnormal_lineup16.pdf")
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1, .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b1 <- subset(sim.b1, .n == 20)#
sim.b1 <- sim.b1[-which(sim.b1$.n == 20),] #
#
# Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
sim.true <- sim_indep_ranef_hlm(fm, nsim = 1, e.dsn = "t", #
	b0.dsn = "norm", b1.dsn = "norm", sigma.err = 2, sigma.b0 = 1, sigma.b1 = 1)                        #
#
sim.y   <- sim_indep_ranef_hlm(fm, nsim = 19, e.dsn = "norm", #
	b0.dsn = "norm", b1.dsn = "norm", sigma.err = 2, sigma.b0 = 1, sigma.b1 = 1)                        #
#
true.mod <- refit(fm, sim.true)#
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0, .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b <- ranef(true.mod)[[1]]#
b0 <- transform(b, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
# Lineup of random intercepts#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
sim.true <- sim_indep_ranef_hlm(fm, nsim = 1, e.dsn = "exp", #
	b0.dsn = "norm", b1.dsn = "norm", sigma.err = 2, sigma.b0 = 1, sigma.b1 = 1)                        #
#
sim.y   <- sim_indep_ranef_hlm(fm, nsim = 19, e.dsn = "norm", #
	b0.dsn = "norm", b1.dsn = "norm", sigma.err = 2, sigma.b0 = 1, sigma.b1 = 1)                        #
#
true.mod <- refit(fm, sim.true)#
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0, .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b <- ranef(true.mod)[[1]]#
b0 <- transform(b, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
# Lineup of random intercepts#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 Fd")
sim.true <- sim_indep_ranef_hlm(fm, nsim = 1, e.dsn = "exp", #
	b0.dsn = "norm", b1.dsn = "norm", sigma.err = 3, sigma.b0 = 1, sigma.b1 = 1)                        #
#
sim.y   <- sim_indep_ranef_hlm(fm, nsim = 19, e.dsn = "norm", #
	b0.dsn = "norm", b1.dsn = "norm", sigma.err = 3, sigma.b0 = 1, sigma.b1 = 1)                        #
#
true.mod <- refit(fm, sim.true)#
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0, .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b <- ranef(true.mod)[[1]]#
b0 <- transform(b, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
# Lineup of random intercepts#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 FF")
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1, .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b0 <- transform(b, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
# Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
sim.true <- sim_indep_ranef_hlm(fm, nsim = 1, e.dsn = "exp", #
	b0.dsn = "norm", b1.dsn = "norm", sigma.err = 2, sigma.b0 = 1, sigma.b1 = 1)                        #
#
sim.y   <- sim_indep_ranef_hlm(fm, nsim = 19, e.dsn = "norm", #
	b0.dsn = "norm", b1.dsn = "norm", sigma.err = 2, sigma.b0 = 1, sigma.b1 = 1)                        #
#
true.mod <- refit(fm, sim.true)#
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0, .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b <- ranef(true.mod)[[1]]#
b0 <- transform(b, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
# Lineup of random intercepts#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")#
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1, .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b0 <- transform(b, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
# Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 F")
Lineup of random intercepts#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 Fy")
sim.true <- sim_indep_ranef_hlm(fm, nsim = 1, e.dsn = "t", #
	b0.dsn = "norm", b1.dsn = "norm", sigma.err = 2, sigma.b0 = 1, sigma.b1 = 1)                        #
#
sim.y   <- sim_indep_ranef_hlm(fm, nsim = 19, e.dsn = "norm", #
	b0.dsn = "norm", b1.dsn = "norm", sigma.err = 2, sigma.b0 = 1, sigma.b1 = 1)                        #
#
true.mod <- refit(fm, sim.true)#
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0, .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b <- ranef(true.mod)[[1]]#
b0 <- transform(b, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
# Lineup of random intercepts#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 F9")
sim.true <- sim_indep_ranef_hlm(fm, nsim = 1, e.dsn = "norm", #
	b0.dsn = "t", b1.dsn = "t", sigma.err = 2, sigma.b0 = 1, sigma.b1 = 1)                        #
#
sim.y   <- sim_indep_ranef_hlm(fm, nsim = 19, e.dsn = "norm", #
	b0.dsn = "norm", b1.dsn = "norm", sigma.err = 2, sigma.b0 = 1, sigma.b1 = 1)                        #
#
true.mod <- refit(fm, sim.true)#
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0, .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b <- ranef(true.mod)[[1]]#
b0 <- transform(b, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
# Lineup of random intercepts#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")#
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1, .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b0 <- transform(b, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
# Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 3")
decrypt("P2SX 6lal Y8 5GhYaYG8 du")
sim.true <- sim_indep_ranef_hlm(fm, nsim = 1, e.dsn = "t", #
	b0.dsn = "t", b1.dsn = "t", sigma.err = 2, sigma.b0 = 1, sigma.b1 = 1)                        #
#
sim.y   <- sim_indep_ranef_hlm(fm, nsim = 19, e.dsn = "norm", #
	b0.dsn = "norm", b1.dsn = "norm", sigma.err = 2, sigma.b0 = 1, sigma.b1 = 1)                        #
#
true.mod <- refit(fm, sim.true)#
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0, .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b <- ranef(true.mod)[[1]]#
b0 <- transform(b, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
# Lineup of random intercepts#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")#
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1, .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b0 <- transform(b, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
# Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 3")
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]#
#
sim.y   <- simulate(fm, nsim = 19)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0[complete.cases(sim.b0),], .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- transform(b.t[complete.cases(b.t),], band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles") +  #
	theme(panel.margin = unit(0, "lines"))
library(grid)
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]#
#
sim.y   <- simulate(fm, nsim = 19)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0[complete.cases(sim.b0),], .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- transform(b.t[complete.cases(b.t),], band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles") +  #
	theme(panel.margin = unit(0, "lines"))
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 du")
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1, .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b1 <- transform(b.t, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
# Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 FF")
fm
fm <- lmer(log.radon ~ basement + uranium + (basement | county), data = radon)
fm
VarCorr(fm)
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]
b.t
cov(b.t)
corr(b.t)
cor(b.t)
sim_t_hlm
?rmt
sessionInfo()
library(mnormt)
install.packages("mnormt")
library(mnormt)
?rmt
help(package=mnormt)
sim_t_hlm <- function(.mod) {#
	vc <- VarCorr( .mod )#
	D  <- as.matrix( bdiag(vc) )#
	sig.e <- sigma(.mod)#
	dims <- .mod@dims#
	n <- dims[["n"]]#
	m <- dims[["q"]] / nrow(D)#
#
	## normal errors#
	e  <- rnorm(n = n, mean = 0, sd = sig.e)#
#
	## mutlivariate t random effects#
	b <- rmt(n = m, mean = c(0, 0), S = D, df = 3)#
	## Generating y#
	bvec <- c(b[,1], b[,2])#
	y <- getME(.mod, "X") %*% fixef(.mod) + getME(.mod, "Z") %*% bvec + e#
	return( as.numeric(y) )#
}
j <- sim_t_hlm(fm)
j
j <- sim_t_hlm(fm); re = ranef(refit(fm, j))[[1]]
head(re)
cor(re)
j <- sim_t_hlm(fm); re = ranef(refit(fm, j))[[1]]
cor(re)
j <- sim_t_hlm(fm); re = ranef(refit(fm, j))[[1]]
cor(re)
j <- sim_t_hlm(fm); re = ranef(refit(fm, j))[[1]]
cor(re)
j <- sim_t_hlm(fm); re = ranef(refit(fm, j))[[1]]
cor(re)
sim_t_hlm <- function(.mod) {#
	vc <- VarCorr( .mod )#
	D  <- as.matrix( bdiag(vc) )#
	S <- D / 3#
	sig.e <- sigma(.mod)#
	dims <- .mod@dims#
	n <- dims[["n"]]#
	m <- dims[["q"]] / nrow(D)#
#
	## normal errors#
	e  <- rnorm(n = n, mean = 0, sd = sig.e)#
#
	## mutlivariate t random effects#
	b <- rmt(n = m, mean = c(0, 0), S = D, df = 3)#
	## Generating y#
	bvec <- c(b[,1], b[,2])#
	y <- getME(.mod, "X") %*% fixef(.mod) + getME(.mod, "Z") %*% bvec + e#
	return( as.numeric(y) )#
}
j <- sim_t_hlm(fm); re = ranef(refit(fm, j))[[1]]
cor(re)
fm
j <- sim_t_hlm(fm); re = ranef(refit(fm, j))[[1]]
cor(re)
j <- sim_t_hlm(fm); re = ranef(refit(fm, j))[[1]]
cor(re)
j <- sim_t_hlm(fm); re = ranef(refit(fm, j))[[1]]
cor(re)
j <- sim_t_hlm(fm); re = ranef(refit(fm, j))[[1]]
cor(re)
?refit
ys <- replicate(100, sim_t_hlm(fm))#
ms <- apply(ys, 2, refit, object = fm)#
re <- lapply(ms, function(x) cor(ranef(x)[[1]]))#
sapply(re, mean)
re
re[[1]]
?diag
upper.tri(re[[1]])
?cor
cors <- lapply(re, function(x) x[1,2])
cors
cors <- sapply(re, function(x) x[1,2])
cors
hist(cors)
help(package=MASS)
sim_t_hlm <- function(.mod) {#
	vc <- VarCorr( .mod )#
	D  <- as.matrix( bdiag(vc) )#
	S <- D / 3#
	sig.e <- sigma(.mod)#
	dims <- .mod@dims#
	n <- dims[["n"]]#
	m <- dims[["q"]] / nrow(D)#
#
	## normal errors#
	e  <- rnorm(n = n, mean = 0, sd = sig.e)#
#
	## mutlivariate t random effects#
	b <- rmvt(n = m, sigma = D, df = 3)#
	## Generating y#
	bvec <- c(b[,1], b[,2])#
	y <- getME(.mod, "X") %*% fixef(.mod) + getME(.mod, "Z") %*% bvec + e#
	return( as.numeric(y) )#
}
VarCorr(fm)
ys <- replicate(100, sim_t_hlm(fm))#
ms <- apply(ys, 2, refit, object = fm)#
re <- lapply(ms, function(x) cor(ranef(x)[[1]]))#
cors <- sapply(re, function(x) x[1,2])
library(mvtnorm)
ys <- replicate(100, sim_t_hlm(fm))#
ms <- apply(ys, 2, refit, object = fm)#
re <- lapply(ms, function(x) cor(ranef(x)[[1]]))#
cors <- sapply(re, function(x) x[1,2])
cors
hist(cors)
dmvt(x=c(0,0), sigma = diag(2))#
  x <- rmvt(n=100, sigma = diag(2), df = 3)#
  plot(x)
vc <- bdiag(VarCorr(fm))
vc
vc <- as.matrix(vc)
vc
dmvt(x=c(0,0), sigma = vc)#
  x <- rmvt(n=100, sigma = vc, df = 3)#
  plot(x)
dmvt(x=c(0,0), sigma = vc)#
  x <- rmvt(n=100, sigma = vc, df = 3)#
  plot(x)
dmvt(x=c(0,0), sigma = vc)#
  x <- rmvt(n=100, sigma = vc, df = 3)#
  plot(x)
dmvt(x=c(0,0), sigma = vc)#
  x <- rmvt(n=100, sigma = vc, df = 3)#
  plot(x)
dmvt(x=c(0,0), sigma = vc)#
  x <- rmvt(n=100, sigma = vc, df = 3)#
  plot(x)
dmvt(x=c(0,0), sigma = vc)#
  x <- rmvt(n=100, sigma = vc, df = 3)#
  plot(x)
dmvt(x=c(0,0), sigma = vc)#
  x <- rmvt(n=100, sigma = vc, df = 3)#
  plot(x)
dmvt(x=c(0,0), sigma = vc)#
  x <- rmvt(n=100, sigma = vc, df = 3)#
  plot(x)
dmvt(x=c(0,0), sigma = vc)#
  x <- rmvt(n=100, sigma = vc, df = 3)#
  plot(x)
sim_t_hlm <- function(.mod) {#
	vc <- VarCorr( .mod )#
	D  <- as.matrix( bdiag(vc) )#
	S <- D / 3#
	sig.e <- sigma(.mod)#
	dims <- .mod@dims#
	n <- dims[["n"]]#
	m <- dims[["q"]] / nrow(D)#
#
	## normal errors#
	e  <- rnorm(n = n, mean = 0, sd = sig.e)#
#
	## mutlivariate t random effects#
	b <- rmt(n = m, mean = c(0, 0), S = S, df = 3)#
	## Generating y#
	bvec <- c(b[,1], b[,2])#
	y <- getME(.mod, "X") %*% fixef(.mod) + getME(.mod, "Z") %*% bvec + e#
	return( as.numeric(y) )#
}
ys <- replicate(100, sim_t_hlm(fm))#
ms <- apply(ys, 2, refit, object = fm)#
re <- lapply(ms, function(x) cor(ranef(x)[[1]]))#
cors <- sapply(re, function(x) x[1,2])
cors
hist(cors)
sim_t_hlm <- function(.mod) {#
	vc <- VarCorr( .mod )#
	D  <- as.matrix( bdiag(vc) )#
	sig.e <- sigma(.mod)#
	dims <- .mod@dims#
	n <- dims[["n"]]#
	m <- dims[["q"]] / nrow(D)#
#
	## normal errors#
	e  <- rnorm(n = n, mean = 0, sd = sig.e)#
#
	## mutlivariate t random effects#
	b <- rmvt(n = m, sigma = D, df = 3)#
	## Generating y#
	bvec <- c(b[,1], b[,2])#
	y <- getME(.mod, "X") %*% fixef(.mod) + getME(.mod, "Z") %*% bvec + e#
	return( as.numeric(y) )#
}
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]#
#
sim.y   <- simulate(fm, nsim = 19)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0[complete.cases(sim.b0),], .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- transform(b.t[complete.cases(b.t),], band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 FF")
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1, .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b1 <- transform(b.t, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
# Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 F7")
fm
b <-  HLMresid(fm, level = "county", standardize = TRUE)#
# b <- ranef(fm)[[1]] # notice that this is actually a matrix#
#
sim.y   <- simulate(fm, nsim = 20)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) HLMresid(x, level = "county", standardize = TRUE)[,1]) # ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0, .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- subset(sim.b0, .n == 20)#
sim.b0 <- sim.b0[-which(sim.b0$.n == 20),] #
#
# Lineup of random intercepts#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
b <-  HLMresid(fm, level = "county", standardize = TRUE)#
# b <- ranef(fm)[[1]] # notice that this is actually a matrix#
#
sim.y   <- simulate(fm, nsim = 20)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0, .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- subset(sim.b0, .n == 20)#
sim.b0 <- sim.b0[-which(sim.b0$.n == 20),] #
#
# Lineup of random intercepts#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1, .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b1 <- subset(sim.b1, .n == 20)#
sim.b1 <- sim.b1[-which(sim.b1$.n == 20),] #
#
# Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
?set.seed
.Random.seed
sim.y   <- simulate(fm, nsim = 20, seed = 2061536346)
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0, .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- subset(sim.b0, .n == 20)#
sim.b0 <- sim.b0[-which(sim.b0$.n == 20),] #
#
# Lineup of random intercepts#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 FA")
sim.y   <- simulate(fm, nsim = 20, seed = 987654321)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0, .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- subset(sim.b0, .n == 20)#
sim.b0 <- sim.b0[-which(sim.b0$.n == 20),] #
#
# Lineup of random intercepts#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 y")
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1, .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b1 <- subset(sim.b1, .n == 20)#
sim.b1 <- sim.b1[-which(sim.b1$.n == 20),] #
#
# Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]#
#
sim.y   <- simulate(fm, nsim = 19)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0[complete.cases(sim.b0),], .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- transform(b.t[complete.cases(b.t),], band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
set.seed(971821584)
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]#
#
sim.y   <- simulate(fm, nsim = 19)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0[complete.cases(sim.b0),], .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- transform(b.t[complete.cases(b.t),], band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
set.seed(991821584)#
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]#
#
sim.y   <- simulate(fm, nsim = 19)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0[complete.cases(sim.b0),], .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- transform(b.t[complete.cases(b.t),], band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 F3")
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1, .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b1 <- transform(b.t, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
# Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 FR")
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]#
#
sim.y   <- simulate(fm, nsim = 19)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0[complete.cases(sim.b0),], .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- transform(b.t[complete.cases(b.t),], band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")#
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1, .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b1 <- transform(b.t, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
# Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 7")
decrypt("P2SX 6lal Y8 5GhYaYG8 FA")
b0
b0[,2]
var(b0[,2])
fm
var(b1[,2])
var(b1[,2])
b.t
cor(b.t)
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]
cor(b.t)
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]
cor(b.t)
cov(b.t)
fm
sim.y   <- simulate(fm, nsim = 19)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0[complete.cases(sim.b0),], .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- transform(b.t[complete.cases(b.t),], band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 F7")
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1, .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b1 <- transform(b.t, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
# Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 FE")
set.seed(991821584)#
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]#
#
sim.y   <- simulate(fm, nsim = 19)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0[complete.cases(sim.b0),], .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- transform(b.t[complete.cases(b.t),], band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1, .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b1 <- transform(b.t, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
# Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 FR")
set.seed(991821584)#
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]
cov(b.t)
vc
set.seed(991821585)#
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]
cov(b.t)
set.seed(991821586)#
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]
cov(b.t)
sim.y   <- simulate(fm, nsim = 19)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0[complete.cases(sim.b0),], .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- transform(b.t[complete.cases(b.t),], band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1, .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b1 <- transform(b.t, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
# Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
set.seed(991821587)#
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]
cov(b.t)
fm
vc
set.seed(999821587)#
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]
cov(b.t)
sim.y   <- simulate(fm, nsim = 19)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0[complete.cases(sim.b0),], .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- transform(b.t[complete.cases(b.t),], band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 A")
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1, .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b1 <- transform(b.t, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
# Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 du")
set.seed(998821587)#
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]
cov(b.t)
set.seed(998021587)#
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]
cov(b.t)
set.seed(9876543321)#
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]
set.seed(987654321)#
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]
cov(b.t)
set.seed(9221632)#
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]
cov(b.t)
set.seed(72385)#
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]
cov(b.t)
set.seed(7231985)#
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]
cov(b.t)
vc
sim.y   <- simulate(fm, nsim = 19)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0[complete.cases(sim.b0),], .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- transform(b.t[complete.cases(b.t),], band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 F")
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1, .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b1 <- transform(b.t, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
# Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 FA")
set.seed(991821586)#
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]#
#
sim.y   <- simulate(fm, nsim = 19)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0[complete.cases(sim.b0),], .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- transform(b.t[complete.cases(b.t),], band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
set.seed(991821585)#
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]#
#
sim.y   <- simulate(fm, nsim = 19)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0[complete.cases(sim.b0),], .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- transform(b.t[complete.cases(b.t),], band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 FF")
.Random.seed
set.seed(-2029298609)
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]#
#
sim.y   <- simulate(fm, nsim = 19)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0[complete.cases(sim.b0),], .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- transform(b.t[complete.cases(b.t),], band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 FR")
cov(b.t)
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1, .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b1 <- transform(b.t, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
# Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
decrypt("P2SX 6lal Y8 5GhYaYG8 E")
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
fm <- lmer(log.radon ~ basement + uranium + (1 | county) + (basement - 1 | county), data = radon)#
### Normal random effects ####
#
sim.y   <- simulate(fm, nsim = 20, seed = 987654321)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0, .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- subset(sim.b0, .n == 20)#
sim.b0 <- sim.b0[-which(sim.b0$.n == 20),] #
#
# Lineup of random intercepts#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")#
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1, .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b1 <- subset(sim.b1, .n == 20)#
sim.b1 <- sim.b1[-which(sim.b1$.n == 20),] #
#
# Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
	xlab("Normal Quantiles") + ylab("Sample Quantiles")
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
#	xlab("Normal Quantiles") + ylab("Sample Quantiles") +#
	ylab(NULL) + xlab(NULL) + #
	theme(axis.text.y = element_blank(), axis.text.x = element_blank(),#
	axis.ticks.x = element_blank(), axis.ticks.y = element_blank())
decrypt("P2SX 6lal Y8 5GhYaYG8 Fy")
.Random.seed
sim.y   <- simulate(fm, nsim = 20, seed = 801065795)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0, .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- subset(sim.b0, .n == 20)#
sim.b0 <- sim.b0[-which(sim.b0$.n == 20),] #
#
# Lineup of random intercepts#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
#	xlab("Normal Quantiles") + ylab("Sample Quantiles") + #
	ylab(NULL) + xlab(NULL) + #
	theme(axis.text.y = element_blank(), axis.text.x = element_blank(),#
	axis.ticks.x = element_blank(), axis.ticks.y = element_blank())
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1, .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b1 <- subset(sim.b1, .n == 20)#
sim.b1 <- sim.b1[-which(sim.b1$.n == 20),] #
#
# Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
#	xlab("Normal Quantiles") + ylab("Sample Quantiles") +#
	ylab(NULL) + xlab(NULL) + #
	theme(axis.text.y = element_blank(), axis.text.x = element_blank(),#
	axis.ticks.x = element_blank(), axis.ticks.y = element_blank())
decrypt("P2SX 6lal Y8 5GhYaYG8 FF")
getwd()
ggsave("figures/qqplot_normranef_slope_lineup11.pdf")
set.seed(-2029298609)#
y.b.t <- sim_t_hlm(fm)#
refit.b.t <-  refit(fm, y.b.t)#
b.t <- ranef(refit.b.t)[[1]]#
#
sim.y   <- simulate(fm, nsim = 19)                        #
sim.mod <- apply(sim.y, 2, refit, object = fm)            ## a list of models#
#
sim.b0 <- llply(sim.mod, function(x) ranef(x)[[1]][,1])   ## a list of random slopes#
sim.b0 <- melt( do.call("rbind", sim.b0) )[,-2]           ## changing to a data frame#
names(sim.b0) <- c("sample", "(Intercept)")                 #
sim.b0        <- arrange(sim.b0, sample)                  ## ordering by simulation#
#
sim.b0$.n <- as.numeric( str_extract(sim.b0$sample, "\\d+") )#
sim.b0 <- ddply(sim.b0[complete.cases(sim.b0),], .(.n), transform, band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
#
b0 <- transform(b.t[complete.cases(b.t),], band = sim_env(`(Intercept)`), #
	x = sort(qqnorm(`(Intercept)`, plot.it=FALSE)$x))#
qplot(sample = X.Intercept., data = b0, stat = "qq") %+%#
	lineup(true = b0, sample = sim.b0) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
#	xlab("Normal Quantiles") + ylab("Sample Quantiles") + #
	ylab(NULL) + xlab(NULL) + #
	theme(axis.text.y = element_blank(), axis.text.x = element_blank(),#
	axis.ticks.x = element_blank(), axis.ticks.y = element_blank())
sim.b1 <- llply(sim.mod, function(x) ranef(x)[[1]][,2])   ## a list of random slopes#
sim.b1 <- melt( do.call("rbind", sim.b1) )[,-2]           ## changing to a data frame#
names(sim.b1) <- c("sample", "basement")                  ## setting colnames for faceting#
sim.b1        <- arrange(sim.b1, sample)                  ## ordering by simulation#
#
sim.b1$.n <- as.numeric( str_extract(sim.b1$sample, "\\d+") )#
sim.b1 <- ddply(sim.b1, .(.n), transform, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
b1 <- transform(b.t, band = sim_env(basement), #
	x = sort(qqnorm(basement, plot.it=FALSE)$x))#
#
# Lineup of random slopes#
qplot(sample = basement, data = b1, stat = "qq") %+%#
	lineup(true = b1, sample = sim.b1) + #
	facet_wrap(~ .sample, ncol = 5) + #
	geom_ribbon(aes(x = x, ymin = band.lower, ymax = band.upper), alpha = .25) + #
#	xlab("Normal Quantiles") + ylab("Sample Quantiles") +#
	ylab(NULL) + xlab(NULL) + #
	theme(axis.text.y = element_blank(), axis.text.x = element_blank(),#
	axis.ticks.x = element_blank(), axis.ticks.y = element_blank())
decrypt("P2SX 6lal Y8 5GhYaYG8 E")
ggsave("figures/qqplot_tranef_slope_lineup6.pdf")
