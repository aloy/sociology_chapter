library(HLMdiag)
?cooks.distance
R code to accompany "HLMdiag: An Implementation of Diagnostics for#
### Hierarchical Linear Models in R" by Loy and Hofmann (2013)#
#
#################################################################################
###  preliminaries#
#################################################################################
library("HLMdiag")  # note that this will load lme4#
library("nullabor") # used to construct lineups#
library("plyr")     # used to construct school-level data set#
#
## The Exam example is bundled with mlmRev#
data(Exam, package = "mlmRev")#
head(Exam)#
#
#################################################################################
###  Model fm1 on page 6#
#################################################################################
(fm1 <- lmer(normexam ~ standLRT + (1 | school), Exam, REML = FALSE))#
#
## Extract level-1 residuals#
resid1_fm1 <- HLMresid(fm1, level = 1, type = "LS", standardize = TRUE)#
head(resid1_fm1)#
#
## LS level-1 residuals vs fitted values (Not in the paper)#
qplot(x = fitted, y = LS.resid, data = resid1_fm1, geom = c("point", "smooth")) +#
ylab("LS level-1 residuals") + xlab("fitted values")#
#
#################################################################################
## Figure 1, page 7#
#################################################################################
qplot(x = standLRT, y = LS.resid, data = resid1_fm1, geom = c("point", "smooth")) + #
ylab("LS level-1 residuals")#
#
## Comparing alternatives to fm1#
fm1a <- lmer(normexam ~ standLRT + I(standLRT^2) + (1 | school), #
Exam, REML = FALSE)#
fm1b <- lmer(normexam ~ standLRT + I(standLRT^2) + I(standLRT^3) + (1 | school), #
Exam, REML = FALSE)#
#
anova(fm1, fm1a, fm1b) #
#
#################################################################################
## Model fm2 on page 7#
#################################################################################
#
## The model with the quadratic and cubic terms is preferred, #
## and we rename it fm2 for clarity in the paper.#
fm2 <- lmer(normexam ~ standLRT + I(standLRT^2) + I(standLRT^3) + #
(1 | school), Exam, REML = FALSE)#
## Extract level-1 residuals#
resid1_fm2 <- HLMresid(fm2, level = 1, type = "LS", standardize = "semi")#
head(resid1_fm2)
fm4 <- lmer(normexam ~ standLRT + I(standLRT^2) + I(standLRT^3) + sex + #
schgend + schavg + (standLRT | school), #
data = Exam, REML = FALSE)#
## Extract level-2 EB residuals#
resid2_fm4 <- HLMresid(fm4, level = "school")
cooks.distance
class(fm4)
cooksd_fm4  <- cooks.distance(fm4, group = "school")
mdffits_fm4 <- mdffits(fm4, group = "school")
Figure 7 - left panel#
dotplot_diag(x = cooksd_fm4, cutoff = "internal", #
name = "cooks.distance") + #
ylab("Cook's distance") + xlab("school")
dotplot_diag(x = cooksd_fm4, cutoff = "internal", name = "cooks.distance", #
modify = "dotplot") + #
ylab("Cook's distance") + xlab("school")
beta_cdd25 <- as.numeric(attr(cooksd_fm4, "beta_cdd")[[25]])#
names(beta_cdd25) <- names(fixef(fm4))#
beta_cdd25
round(beta_cdd25, 5)
Calculate covariance ratio for model fm4#
covratio_fm4 <- covratio(fm4, group = "school")#
#
## Calculate covariance trace for model fm4#
covtrace_fm4 <- covtrace(fm4, group = "school")
covratio_fm4
covtrace_fm4
mean(covratio_fm4)
Calculate relative variance change for model fm4#
rvc_fm4 <- rvc(fm4, group = "school")#
head(rvc_fm4)
dotplot_diag(rvc_fm4[, "D22"], cutoff = "internal", name = "rvc", modify = "boxplot") + #
xlab("school") + ylab("RVC")
Calculate leverage for model fm4#
leverage_fm4 <- leverage(fm4, level = "school")#
head(leverage_fm4)
library("HLMdiag")  # note that this will load lme4#
library("nullabor") # used to construct lineups#
library("plyr")     # used to construct school-level data set#
#
## The Exam example is bundled with mlmRev#
data(Exam, package = "mlmRev")#
head(Exam)
(fm1 <- lmer(normexam ~ standLRT + (1 | school), Exam, REML = FALSE))#
#
## Extract level-1 residuals#
resid1_fm1 <- HLMresid(fm1, level = 1, type = "LS", standardize = TRUE)#
head(resid1_fm1)#
#
## LS level-1 residuals vs fitted values (Not in the paper)#
qplot(x = fitted, y = LS.resid, data = resid1_fm1, geom = c("point", "smooth")) +#
ylab("LS level-1 residuals") + xlab("fitted values")
sessionInfo()
?cooks.distance
?cooks.distance.mer
qplot(x = standLRT, y = LS.resid, data = resid1_fm1, geom = c("point", "smooth")) + #
ylab("LS level-1 residuals")
Comparing alternatives to fm1#
fm1a <- lmer(normexam ~ standLRT + I(standLRT^2) + (1 | school), #
Exam, REML = FALSE)#
fm1b <- lmer(normexam ~ standLRT + I(standLRT^2) + I(standLRT^3) + (1 | school), #
Exam, REML = FALSE)#
#
anova(fm1, fm1a, fm1b)
fm2 <- lmer(normexam ~ standLRT + I(standLRT^2) + I(standLRT^3) + #
(1 | school), Exam, REML = FALSE)
resid1_fm2 <- HLMresid(fm2, level = 1, type = "LS", standardize = "semi")#
head(resid1_fm2)
qplot(x = `I(standLRT^2)`, y = semi.std.resid, data = resid1_fm2) + #
geom_smooth(method = "lm") + #
ylab("semi-standardized residuals") + #
xlab("standLRT2")
Simulating null data#
set.seed(1234)#
sim_fm2 <- simulate(fm2, nsim = 19)#
#
## Refit#
refit_fm2 <- apply(sim_fm2, 2, refit, object = fm2)#
#
## Extract level-1 residuals#
sim_fm2_lev1_resid <- ldply(refit_fm2, function(x){#
HLMresid(object = x, level = 1, type = "LS", sim = x@y, standardize = "semi")#
})#
#
## Labeling for nullabor#
sim_fm2_lev1_resid$.n <- rep(1:19, each = 4059)#
names(sim_fm2_lev1_resid)[4:5] <- c("standLRT2", "standLRT3")#
#
## Formatting for nullabor#
lev1_resid_fm2 <- HLMresid(object = fm2, level = 1, type = "LS", standardize = "semi")#
names(lev1_resid_fm2)[3:4] <- c("standLRT2", "standLRT3")#
class(lev1_resid_fm2[,3])  <- "numeric"#
#
## Creating lineup#
qplot(standLRT2, semi.std.resid, data = lev1_resid_fm2,#
geom = "point", alpha = I(0.3)) %+%#
lineup(true = lev1_resid_fm2, samples = sim_fm2_lev1_resid) +#
facet_wrap(~ .sample, ncol = 4) +#
geom_hline(aes(yintercept = 0), colour = I("red")) + #
ylab("semi-standardized residuals")
fm@resp$y
fm1@resp$y
Simulating null data#
set.seed(1234)#
sim_fm2 <- simulate(fm2, nsim = 19)#
#
## Refit#
refit_fm2 <- apply(sim_fm2, 2, refit, object = fm2)#
#
## Extract level-1 residuals#
sim_fm2_lev1_resid <- ldply(refit_fm2, function(x){#
HLMresid(object = x, level = 1, type = "LS", sim = x@resp$y, standardize = "semi")#
})#
#
## Labeling for nullabor#
sim_fm2_lev1_resid$.n <- rep(1:19, each = 4059)#
names(sim_fm2_lev1_resid)[4:5] <- c("standLRT2", "standLRT3")#
#
## Formatting for nullabor#
lev1_resid_fm2 <- HLMresid(object = fm2, level = 1, type = "LS", standardize = "semi")#
names(lev1_resid_fm2)[3:4] <- c("standLRT2", "standLRT3")#
class(lev1_resid_fm2[,3])  <- "numeric"#
#
## Creating lineup#
qplot(standLRT2, semi.std.resid, data = lev1_resid_fm2,#
geom = "point", alpha = I(0.3)) %+%#
lineup(true = lev1_resid_fm2, samples = sim_fm2_lev1_resid) +#
facet_wrap(~ .sample, ncol = 4) +#
geom_hline(aes(yintercept = 0), colour = I("red")) + #
ylab("semi-standardized residuals")
decrypt("P2SX 6lal Y8 5GhYaYG8 Fy")
ssresid <- na.omit(resid1_fm2$semi.std.resid)#
ggplot_qqnorm(x = ssresid, line = "rlm")
fm3 <- lmer(normexam ~ standLRT + I(standLRT^2) + I(standLRT^3) + sex +#
(standLRT | school), Exam, REML = FALSE)#
#
## Extract level-2 EB residuals#
resid2_fm3 <- HLMresid(object = fm3, level = "school")#
head(resid2_fm3)
Construct school-level data set#
SchoolExam <- ddply(Exam, .(school), summarise, size = length(school),#
schgend = unique(schgend),schavg = unique(schavg),#
type = unique(type), schLRT = mean(standLRT))#
#
## Left panel -- figure 5#
qplot(x = reorder(SchoolExam$schgend, resid2_fm3[,1], median), #
y = resid2_fm3[,1], geom = 'boxplot', #
xlab = 'school gender', ylab = 'level-2 residual (Intercept)')#
## Right panel -- figure 5#
qplot(x = schavg, y = resid2_fm3[,1], data = SchoolExam, #
geom = c("point", "smooth"), #
xlab = "average intake score", ylab = "level-2 residual (Intercept)")#
#
## Testing utility of omitted variables#
fm3a <- lmer(normexam ~ standLRT + I(standLRT^2) + I(standLRT^3) + sex +#
schgend + (standLRT | school), Exam, REML = FALSE)#
fm3b <- lmer(normexam ~ standLRT + I(standLRT^2) + I(standLRT^3) + sex +#
schgend + schavg + (standLRT | school), Exam, REML = FALSE)#
#
anova(fm3, fm3a, fm3b)
From above we found both schgend and schavg to improve the model,#
## and we rename the improved model fm4 for clarity#
fm4 <- lmer(normexam ~ standLRT + I(standLRT^2) + I(standLRT^3) + sex + #
schgend + schavg + (standLRT | school), #
data = Exam, REML = FALSE)#
## Extract level-2 EB residuals#
resid2_fm4 <- HLMresid(fm4, level = "school")
Left panel#
ggplot_qqnorm(resid2_fm4$`(Intercept)`, line = "rlm")#
#
## Right panel#
ggplot_qqnorm(resid2_fm4$standLRT, line = "rlm")
cooksd_fm4  <- cooks.distance(fm4, group = "school")
mdffits_fm4 <- mdffits(fm4, group = "school")
dotplot_diag(x = cooksd_fm4, cutoff = "internal", #
name = "cooks.distance") + #
ylab("Cook's distance") + xlab("school")#
#
## Figure 7 - right panel#
dotplot_diag(x = cooksd_fm4, cutoff = "internal", name = "cooks.distance", #
modify = "dotplot") + #
ylab("Cook's distance") + xlab("school")
beta_cdd25 <- as.numeric(attr(cooksd_fm4, "beta_cdd")[[25]])#
names(beta_cdd25) <- names(fixef(fm4))#
beta_cdd25
round(beta_cdd25, 5)
Calculate covariance ratio for model fm4#
covratio_fm4 <- covratio(fm4, group = "school")#
#
## Calculate covariance trace for model fm4#
covtrace_fm4 <- covtrace(fm4, group = "school")
covratio_fm4
covtrace_fm4
Calculate relative variance change for model fm4#
rvc_fm4 <- rvc(fm4, group = "school")#
head(rvc_fm4)
Figure 8#
dotplot_diag(rvc_fm4[, "D22"], cutoff = "internal", name = "rvc", modify = "boxplot") + #
xlab("school") + ylab("RVC")
Calculate leverage for model fm4#
leverage_fm4 <- leverage(fm4, level = "school")#
head(leverage_fm4)
help(HLMdiag)
?leverage
?covtrace
?covratio
?cooks.distance
q("no")
install.packages("lme4")
library(HLMdiag)
dotplot_diag
qplot
deparse("Q25G")
parse("Q25G")
dotplot_diag
?substitute
qplot
scale_fill_gradient
?qplot
sum(1598.33, 884.35)
3354.78 - sum(1598.33, 884.35)
install.packages("influence.ME")
help(package=influence.ME)
q("no")
90*.9
60*.9
sum(54,54,81,81)
40*.9
60*.9
sum(960, 780, 340, 720)
2800/3
setwd("~/Documents/Thesis/Dissertation/sociology_chapter/")#
#
library(lme4)#
library(HLMdiag)#
library(foreign)#
library(stringr)#
library(HLMdiag)#
library(nullabor)#
library(plyr)#
library(reshape2)
library(mlmRev)
M3 <- lmer(normexam ~ standLRT + I(standLRT^2) + I(standLRT^3) + (standLRT | school), data = Exam)
m3.sims  <- simulate(M3, nsim = 19, seed = 1234)#
m3.refit <- lapply(m3.sims, refit, object = M3)#
m3.resid <- lapply(m3.refit, function(x) ranef(x)[[1]])
sim.resid3 <- do.call("cbind", m3.resid)
sim.resid3$sim <- rownames(sim.resid3)
head(sim.resid)
head(sim.resid3)
sim.resid3 <- do.call("rbind", m3.resid)
sim.resid3$sim <- rownames(sim.resid3)
names(sim.resid3) <- c(".n", "resid")
head(sim.resid3)
sim.resid3 <- do.call("rbind", m3.resid)
sim.resid3$sim <- rownames(sim.resid3)
head(sim.resid3)
sim.resid3$.n <- as.numeric(str_extract(sim.resid3$sim, "\\d+"))
head(sim.resid3)
tail(sim.resid3)
sim.resid3$standLRT2 <- rep(SchoolExam$schgend, times=19)
SchoolExam <- ddply(Exam, .(school), summarise, size = length(school),#
                    schgend = unique(schgend),schavg = unique(schavg),#
                    type = unique(type), schLRT = mean(standLRT))
sim.resid3$standLRT2 <- rep(SchoolExam$schgend, times=19)
head(sim.resid3)
true.resid3 <- data.frame(schgend =SchoolExam$schgend, ranef(M3)[[1]])
head(true.resid3)
names(true.resid3) <- c("schgend", "(Intercept)", "standLRT")
head(true.resid3)
qplot(x = schgend, y =`(Intercept)`, data = true.resid3, geom = "boxplot") %+% lineup(true = true.resid3, samples = sim.resid3)
tail(true.resid3)
summary(true.resid3)
summary(sim.resid3)
sim.resid3 <- do.call("rbind", m3.resid)#
sim.resid3$sim <- rownames(sim.resid3)#
sim.resid3$.n <- as.numeric(str_extract(sim.resid3$sim, "\\d+"))#
sim.resid3$schgend <- rep(SchoolExam$schgend, times=19)
true.resid3 <- data.frame(schgend =SchoolExam$schgend, ranef(M3)[[1]])
names(true.resid3) <- c("schgend", "(Intercept)", "standLRT")
qplot(x = schgend, y =`(Intercept)`, data = true.resid3, geom = "boxplot")
qplot(x = schgend, y =`(Intercept)`, data = true.resid3, geom = "boxplot") %+% lineup(true = true.resid3, samples = sim.resid3) + facet_wrap( ~ .sample, ncol=4)
qplot(x = schgend, y =`(Intercept)`, data = true.resid3, geom = "boxplot") %+% lineup(true = true.resid3, samples = sim.resid3) + facet_wrap( ~ .sample, ncol=3)
qplot(x = schgend, y =`(Intercept)`, data = true.resid3, geom = "boxplot") %+% lineup(true = true.resid3, samples = sim.resid3) + facet_wrap( ~ .sample, ncol=5)
decrypt("P2SX 6lal Y8 5GhYaYG8 Fy")
sim.resid3 <- do.call("rbind", m3.resid)#
sim.resid3$sim <- rownames(sim.resid3)#
sim.resid3$.n <- as.numeric(str_extract(sim.resid3$sim, "\\d+"))#
sim.resid3$schgend <- rep(SchoolExam$schgend, times=19)#
sim.resid3$schavg <- rep(SchoolExam$schavg, times = 19)#
#
true.resid3 <- data.frame(schgend =SchoolExam$schgend, ranef(M3)[[1]])#
names(true.resid3) <- c("schgend", "(Intercept)", "standLRT")#
true.resid3$schavg <- SchoolExam$schavg
head(true.resid3)
head(sim.resid3)
qplot(x = schavg, y =`(Intercept)`, data = true.resid3, geom = c("point", "smooth")) %+% lineup(true = true.resid3, samples = sim.resid3) + facet_wrap( ~ .sample, ncol=5)
qplot(x = schavg, y =`(Intercept)`, data = true.resid3, geom = c("point", "smooth"), method = "lm", se=F) %+% lineup(true = true.resid3, samples = sim.resid3) + facet_wrap( ~ .sample, ncol=5)
decrypt("P2SX 6lal Y8 5GhYaYG8 FE")
M4 <- lmer(normexam ~ standLRT + I(standLRT^2) + I(standLRT^3) + sex + schgend + schavg + (standLRT | school), data = Exam)
m4.sims  <- simulate(M4, nsim = 19, seed = 1234)
m4.refit <- lapply(m4.sims, refit, object = M4)
m4.resid <- lapply(m4.refit, function(x) ranef(x)[[1]])
sim.resid4 <- do.call("rbind", m4.resid)#
sim.resid4$sim <- rownames(sim.resid4)#
sim.resid4$.n <- as.numeric(str_extract(sim.resid4$sim, "\\d+"))#
sim.resid4$schgend <- rep(SchoolExam$schgend, times=19)#
sim.resid4$schavg <- rep(SchoolExam$schavg, times = 19)
true.resid4 <- data.frame(schgend =SchoolExam$schgend, ranef(M4)[[1]])
names(true.resid4) <- c("schgend", "(Intercept)", "standLRT")
true.resid4$schavg <- SchoolExam$schavg
qplot(x = schgend, y =`(Intercept)`, data = true.resid4, geom = "boxplot") %+% lineup(true = true.resid3, samples = sim.resid3) + facet_wrap( ~ .sample, ncol=5)
decrypt("P2SX 6lal Y8 5GhYaYG8 A")
qplot(x = schgend, y =`(Intercept)`, data = true.resid4, geom = "boxplot") %+% lineup(true = true.resid3, samples = sim.resid4) + facet_wrap( ~ .sample, ncol=5)
decrypt("P2SX 6lal Y8 5GhYaYG8 FA")
qplot(x = schavg, y =`(Intercept)`, data = true.resid4, geom = c("point", "smooth"), method = "lm", se=F) %+% lineup(true = true.resid4, samples = sim.resid3) + facet_wrap( ~ .sample, ncol=5)
qplot(x = schavg, y =`(Intercept)`, data = true.resid4, geom = c("point", "smooth"), method = "lm", se=F) %+% lineup(true = true.resid4, samples = sim.resid4) + facet_wrap( ~ .sample, ncol=5)
M4
qplot(x = schgend, y =`(Intercept)`, data = true.resid4, geom = "boxplot") %+% lineup(true = true.resid4, samples = sim.resid4) + facet_wrap( ~ .sample, ncol=5)
decrypt("P2SX 6lal Y8 5GhYaYG8 y")
qplot(x = standLRT, y = normexam, data = Exam, geom = "smooth", group = school, se = F, method = "lm")
qplot(x = normexam, y = fitted(M4), data = Exam)
qplot(x = normexam, y = fitted(M4), data = Exam, group = school, geom = "smooth")
warnings()
qplot(x = normexam, y = fitted(M4), data = Exam, group = school, geom = "smooth", method = "lm")
qplot(x = normexam, y = fitted(M4), data = Exam, group = school, geom = "smooth", method = "lm", se = F)
M5 <- lmer(normexam <- standLRT + sex + schgend + (standLRT | school), data = Exam)
M5 <- lmer(normexam <- standLRT + sex + schgend + (standLRT | school), data = Exam)
head(Exam)
lmer(normexam <- standLRT + sex + schgend + (standLRT | school), data = Exam)
M5 <- lmer(normexam <- standLRT + sex + schgend + (standLRT | school), data = Exam)
normexam <- standLRT + sex + schgend + (standLRT | school)
M5 <- lmer(normexam ~ standLRT + sex + schgend + (standLRT | school), data = Exam)
M5
0.574 * 0.12278 * 0.28923
M5 <- lmer(normexam ~ standLRT + sex + schgend + (standLRT | school), data = Exam)#
qplot(x = normexam, y = fitted(M5), data = Exam, group = school, geom = "smooth", method = "lm", se = F)
qplot(x = normexam, y = fitted(M5), data = Exam, group = school, geom = "line", method = "lm", se = F)
qplot(x = normexam, y = fitted(M5), data = Exam, group = school, geom = "line")
fitted(M5)
j <- data.frame(fitted = fitted(M5), standLRT = Exam$standLRT)
j <- data.frame(fitted = fitted(M5), standLRT = Exam$standLRT, school = Exam$school)
head(j)
qplot(x = standLRT, y = fitted, data =subset(j, school == 1))
M5
qplot(x = normexam, y = fitted(M5), data = Exam, group = school:sex, geom = "line")
qplot(x = normexam, y = fitted(M5), data = Exam, group = school:sex, geom = "smooth", method = "lm", se=F)
qplot(x = normexam, y = fitted(M5), data = Exam, group = school, geom = "smooth", method = "lm", se=F)
qplot(x = normexam, y = fitted(M5), data = Exam, group = school, geom = "smooth", method = "rlm", se=F)
qplot(x = normexam, y = fitted(M5), data = Exam, group = school, geom = "smooth", method = "lm", se=F)
m5.sims  <- simulate(M5, nsim = 19, seed = 1235)
m5.refit <- lapply(m5.sims, refit, object = M5)
m5.resid <- lapply(m5.refit, function(x) ranef(x)[[1]])
sim.resid5 <- do.call("rbind", m5.resid)
sim.resid5$sim <- rownames(sim.resid5)
sim.resid5$.n <- as.numeric(str_extract(sim.resid5$sim, "\\d+"))
m5.resid <- lapply(m5.refit, fitted)
sim.resid5 <- do.call("rbind", m5.resid)
sim.fitted5 <- do.call("rbind", m5.fitted)
m5.fitted <- lapply(m5.refit, fitted)
sim.fitted5 <- do.call("rbind", m5.fitted)
head(sim.fitted5)
sim.fitted5 <- do.call("cbind", m5.fitted)
head(sim.fitted5)
sim.fitted5 <- melt(sim.fitted5)[,-1]
head(sim.fitted5)
names(sim.resid2) <- c(".n", "resid")
names(sim.fitted5) <- c(".n", "resid")
sim.fitted5 $.n <- as.numeric(str_extract(sim.fitted5 $.n, "\\d+"))
sim.fitted5$standLRT <- rep(Exam$normexam, times=19)
sim.fitted5 <- melt(sim.fitted5)[,-1]#
names(sim.fitted5) <- c(".n", "fitted")#
sim.fitted5$.n <- as.numeric(str_extract(sim.fitted5 $.n, "\\d+"))#
sim.fitted5$standLRT <- rep(Exam$normexam, times=19)
sim.fitted5 <- do.call("cbind", m5.fitted)#
sim.fitted5 <- melt(sim.fitted5)[,-1]#
names(sim.fitted5) <- c(".n", "fitted")#
sim.fitted5$.n <- as.numeric(str_extract(sim.fitted5 $.n, "\\d+"))#
sim.fitted5$standLRT <- rep(Exam$normexam, times=19)
head(sim.fitted5)
sim.fitted5 <- do.call("cbind", m5.fitted)#
sim.fitted5 <- melt(sim.fitted5)[,-1]#
names(sim.fitted5) <- c(".n", "fitted")#
sim.fitted5$.n <- as.numeric(str_extract(sim.fitted5 $.n, "\\d+"))#
sim.fitted5$normexam <- rep(Exam$normexam, times=19)
head(sim.fitted5)
true.fitted5 <- data.frame(fitted = fitted(M5), normexam = Exm$normexam)
true.fitted5 <- data.frame(fitted = fitted(M5), normexam = Exam$normexam)
qplot(x = normexam, y = fitted(M5), data = Exam, group = school, geom = "smooth", method = "lm", se=F) %+% lineup(true = true.fitted5, samples = sim.fitted5) + facet_wrap( ~ .sample, ncol=5)
sim.fitted5 <- do.call("cbind", m5.fitted)#
sim.fitted5 <- melt(sim.fitted5)[,-1]#
names(sim.fitted5) <- c(".n", "fitted")#
sim.fitted5$.n <- as.numeric(str_extract(sim.fitted5 $.n, "\\d+"))#
sim.fitted5$normexam <- rep(Exam$normexam, times=19)#
sim.fitted5$school <- rep(Exam$school, times=19)#
#
true.fitted5 <- data.frame(fitted = fitted(M5), normexam = Exam$normexam, school = Exam$school)#
#
qplot(x = normexam, y = fitted(M5), data = Exam, group = school, geom = "smooth", method = "lm", se=F) %+% lineup(true = true.fitted5, samples = sim.fitted5) + facet_wrap( ~ .sample, ncol=5)
qplot(x = normexam, y = fitted(M5), data = Exam, group = school, geom = "smooth", method = "lm", se=F)
head(sim.fitted5)
head(true.fitted5)
qplot(x = normexam, y = fitted(M5), data = Exam, group = school, geom = "smooth", method = "lm", se=F) %+% lineup(true = true.fitted5, samples = sim.fitted5)
qplot(x = normexam, y = fitted, data = true.fitted5, group = school, geom = "smooth", method = "lm", se=F) %+% lineup(true = true.fitted5, samples = sim.fitted5) + facet_wrap( ~ .sample, ncol=5)
decrypt("P2SX 6lal Y8 5GhYaYG8 du")
qplot(ranef(M5)[[1]][,1], ranef(M5)[[1]][,2])
ggplot(aes(x = standLRT, y = normexam), data = Exam,  group = school) + geom_abline(aes(intercept = m1.coef$`(Intercept)`, slope = m1.coef$`standLRT`), data = m1.coef[[1]])
Initial model#
M1 <- lmer(normexam ~ standLRT + (1 | school), data = Exam)#
#
# Do we need a random slope?#
qplot(x = standLRT, y = normexam, data = Exam, geom = "smooth", group = school, se = F, method = "lm")#
#
m1.sims  <- simulate(M1, nsim = 19, seed = 1234)#
m1.refit <- lapply(m1.sims, refit, object = M1)#
m1.coef  <- lapply(m1.refit, function(x) coef(x)[[1]])#
#
ggplot(aes(x = standLRT, y = normexam), data = Exam,  group = school) + geom_abline(aes(intercept = m1.coef$`(Intercept)`, slope = m1.coef$`standLRT`), data = m1.coef[[1]])
m1.sims  <- simulate(M1, nsim = 19, seed = 1234)#
m1.refit <- lapply(m1.sims, refit, object = M1)#
m1.fitted  <- lapply(m1.refit, fitted)#
#
m1.fitted <- do.call("rbind", m1.fitted)
m1.fitted
m1.fitted  <- lapply(m1.refit, fitted)#
#
m1.fitted <- do.call("cbind", m1.fitted)
m1.fitted
head(m1.fitted)
sim.fitted <- do.call("cbind", m1.fitted)
m1.fitted  <- lapply(m1.refit, fitted)
sim.fitted <- do.call("cbind", m1.fitted)
sim.fitted <- melt(sim.fitted)[,-1]
head(sim.fitted)
names(sim.fitted5) <- c(".n", "fitted")
head(sim.fitted)
sim.fitted$.n <- as.numeric(str_extract(sim.fitted$.n, "\\d+"))
sim.fitted <- do.call("cbind", m1.fitted)#
sim.fitted <- melt(sim.fitted)[,-1]#
names(sim.fitted) <- c(".n", "fitted")#
sim.fitted$.n <- as.numeric(str_extract(sim.fitted$.n, "\\d+"))
head(sim.fitted)
qplot(x = standLRT, y = fitted(M5), data = Exam, group = school, geom = "smooth", method = "lm", se=F)
sim.fitted5 <- do.call("cbind", m5.fitted)#
sim.fitted5 <- melt(sim.fitted5)[,-1]#
names(sim.fitted5) <- c(".n", "fitted")#
sim.fitted5$.n <- as.numeric(str_extract(sim.fitted5 $.n, "\\d+"))#
sim.fitted5$standLRT <- rep(Exam$standLRT, times=19)#
sim.fitted5$school <- rep(Exam$school, times=19)#
#
true.fitted5 <- data.frame(fitted = fitted(M5), standLRT = Exam$standLRT, school = Exam$school)#
#
qplot(x = standLRT, y = fitted, data = true.fitted5, group = school, geom = "smooth", method = "lm", se=F) %+% lineup(true = true.fitted5, samples = sim.fitted5) + facet_wrap( ~ .sample, ncol=5)
decrypt("P2SX 6lal Y8 5GhYaYG8 Fy")
sim.fitted$standLRT <- rep(Exam$standLRT, rep = 19)
sim.fitted <- do.call("cbind", m1.fitted)#
sim.fitted <- melt(sim.fitted)[,-1]#
names(sim.fitted) <- c(".n", "fitted")#
sim.fitted$.n <- as.numeric(str_extract(sim.fitted$.n, "\\d+"))#
sim.fitted$standLRT <- rep(Exam$standLRT, rep = 19)#
sim.fitted$school <- rep(Exam$school, rep = 19)
true.fitted <- data.frame(fitted = fitted(M1), standLRT = Exam$standLRT, school = Exam$school)
qplot(x = standLRT, y = fitted, data = true.fitted, group = school, geom = "smooth", method = "lm", se=F) %+% lineup(true = true.fitted, samples = sim.fitted) + facet_wrap( ~ .sample, ncol=5)
true.fitted <- data.frame(fitted = Exam$normexam, standLRT = Exam$standLRT, school = Exam$school)
qplot(x = standLRT, y = fitted, data = true.fitted, group = school, geom = "smooth", method = "lm", se=F) %+% lineup(true = true.fitted, samples = sim.fitted) + facet_wrap( ~ .sample, ncol=5)
str(m1.refit[[1]])
m1.simy <- lapply(m1.refit, function(x) x@y)
sim.y <- do.call("cbind", m1.simy)
head(sim.y)
sim.y <- melt(sim.y)[,-1]
head(sim.y)
sim.y$.n <- as.numeric(str_extract(sim.y$.n, "\\d+"))
sim.y <- do.call("cbind", m1.simy)#
sim.y <- melt(sim.y)[,-1]#
names(sim.y) <- c(".n", "y")#
sim.y$.n <- as.numeric(str_extract(sim.y$.n, "\\d+"))
head(sim.y)
sim.y$standLRT <- rep(Exam$standLRT, rep = 19)
sim.y$school <- rep(Exam$school, rep = 19)
head(sim.y)
true.y <- data.frame(y = Exam$normexam, standLRT = Exam$standLRT, school = Exam$school)
qplot(x = standLRT, y = y, data = true.y, group = school, geom = "smooth", method = "lm", se=F) %+% lineup(true = true.y, samples = sim.y) + facet_wrap( ~ .sample, ncol=5)
decrypt("P2SX 6lal Y8 5GhYaYG8 FR")
?wages
j <- lmer(lnw ~ exper + (exper | id), data = wages)
qplot(ranef(j)[[1]][,1], ranef(j)[[1]][,2])
qplot(ranef(j)[[1]][,1], ranef(j)[[1]][,2], alpha = I(0.3))
