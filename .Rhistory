-------------------------------------------------------------------------------#
# Script constructing lineups for use in a paper demonstrating their utility#
# in checking the assumptions for hierarchical linear models.#
##
# Adam Loy#
# May 2013#
##
# EXAM DATA#
# Description: 4059 students nested within 65 schools#
# Variables - #
# *school - school id#
# *student - student id#
# *normexam - student's standardized exam score at 16#
# *schgend - school's gender#
# *schavg - #
# *vr -#
# *intake -#
# *standLRT - student's standardized score on the London reading test (age 11)#
# *sex - student's gender#
#-------------------------------------------------------------------------------#
#
#-------------------------------------------------------------------------------#
# Preliminaries#
#-------------------------------------------------------------------------------#
#
setwd("~/Documents/Thesis/Dissertation/sociology_chapter/")#
library(ggplot2)#
library(lme4)     # for modeling#
library(HLMdiag)  # for residuals#
library(mlmRev)   # for the exam data#
library(nullabor) # for lineups#
library(plyr)#
library(reshape2)#
library(stringr)#
#
#-------------------------------------------------------------------------------#
# Lineup to test for random slope#
#-------------------------------------------------------------------------------#
# Initial model#
M1 <- lmer(normexam ~ standLRT + (1 | school), data = Exam)
Do we need to allow for correlation? Typically you would add the random effect, then#
# test for the correlation. So that is what we will try.#
M2 <- lmer(normexam ~ standLRT + (standLRT  | school), data = Exam)#
M3 <- lmer(normexam ~ standLRT + (standLRT - 1 | school) + (1 | school), data = Exam)
The lineup -need to compare simulated ranefs to ranefs of M2#
M3.sims  <- simulate(M3, nsim = 19)#
M3.refit <- lapply(M3.sims, refit, object = M3)#
M3.sim.ranef <- lapply(M3.refit, function(x) ranef(x)[[1]])#
#
M3.sim.ranef <- do.call("rbind", M3.sim.ranef)#
M3.sim.ranef$.n <- rownames(M3.sim.ranef)#
M3.sim.ranef$.n <- as.numeric(str_extract(M3.sim.ranef$.n, "\\d+"))#
#
true.M2.ranef <- ranef(M3)$school
qplot(x = `(Intercept)`, y = standLRT, data = true.M2.ranef, #
	geom = c("point", "smooth"), method = "lm", se = F, alpha = I(0.4)) %+% #
	lineup(true = true.M2.ranef, samples = M3.sim.ranef) + #
	facet_wrap( ~ .sample, ncol=5) + #
	xlab(NULL) + ylab(NULL) + #
	theme(axis.text.y = element_blank(), axis.text.x = element_blank(),#
	axis.ticks.x = element_blank(), axis.ticks.y = element_blank())
decrypt("P2SX 6lal Y8 5GhYaYG8 Fu")
sqrt(70+11)
