library(lme4)
library(plyr)
data("ahd", package = "HLMdiag")
# Fitted model
fm <- lmer(sbvalue ~ treatment + week*baseline + I(week^2)*baseline +
(0 + week + I(week^2) | subject), data = ahd)
# Fitted model
fm <- lmer(sbvalue ~ treatment + week*baseline + I(week^2)*baseline +
(0 + week + I(week^2) | subject), data = ahd)
nobs.subj <- ddply(ahd, .(subject), summarise, nobs = sum(!is.na(sbvalue)))
few.obs <- nobs.subj[nobs.subj$nobs < 4, 1]
reduced.ahd <- subset(ahd, !subject %in% few.obs)
calc_s_df <- function(x, formula) {
mod <- lm(formula, data = x)
smry <- summary(mod)
s  <- smry$sigma  # residual std. dev.
df <- smry$df[2]  # n_i - r_i
return(c(s = s, df = df))
#   res <- ( log(s^2) - ( sum(df * log(s^2)) / sum(df) ) ) / sqrt( 2 / df )
#   return(res)
}
test.df <- ddply(reduced.ahd, .(subject), calc_s_df, formula = sbvalue ~ week + I(week^2))
test.df <- transform(test.df, d = ( log(s^2) - ( sum(df * log(s^2)) / sum(df) ) ) / sqrt( 2 / df ) )
H <- sum(test.df$d^2)
pchisq(H, df = nrow(test.df) - 1, lower.tail = FALSE)
head(fm@frame)
fm
set.seed(9208326894)
sim.ys <- simulate(fm, nsim = 1000)
sim.df <- lapply(sim.ys, function(y) {
df <- fm@frame
df$sbvalue <- y
return(df)
})
set.seed(920832689)
sim.ys <- simulate(fm, nsim = 1000)
sim.df <- lapply(sim.ys, function(y) {
df <- fm@frame
df$sbvalue <- y
return(df)
})
sim.h <- sapply(sim.df, FUN = function(x){
df <- ddply(x,  .(county), calc_s_df, formula = sbvalue ~ week + I(week^2))
df <- transform(df, d = ( log(s^2) - ( sum(df * log(s^2)) / sum(df) ) ) / sqrt( 2 / df ) )
return(sum(df$d^2))
})
sim.h <- sapply(sim.df, FUN = function(x){
df <- ddply(x,  .(subject), calc_s_df, formula = sbvalue ~ week + I(week^2))
df <- transform(df, d = ( log(s^2) - ( sum(df * log(s^2)) / sum(df) ) ) / sqrt( 2 / df ) )
return(sum(df$d^2))
})
sim.h
sim.df[[1]]
j <- sim.df[[1]]
calc_s_df(j, formula = sbvalue ~ week + I(week^2))
jj <- calc_s_df(j, formula = sbvalue ~ week + I(week^2))
transform(jj, d = ( log(s^2) - ( sum(df * log(s^2)) / sum(df) ) ) / sqrt( 2 / df ) )
with(jj, d = ( log(s^2) - ( sum(df * log(s^2)) / sum(df) ) ) / sqrt( 2 / df ) )
with(data.frame(jj), d = ( log(s^2) - ( sum(df * log(s^2)) / sum(df) ) ) / sqrt( 2 / df ) )
jj
str(jj)
str(data.frame(jj))
str(as.data.frame(jj))
as.data.frame(jj)
df <- ddply(sim.df,  .(subject), calc_s_df, formula = sbvalue ~ week + I(week^2))
df <- ddply(sim.df[[1]],  .(subject), calc_s_df, formula = sbvalue ~ week + I(week^2))
df
sim.h <- sapply(sim.df, FUN = function(x){
reduced.df <- subset(x, !subject %in% few.obs)
df <- ddply(reduced.df,  .(subject), calc_s_df, formula = sbvalue ~ week + I(week^2))
df <- transform(df, d = ( log(s^2) - ( sum(df * log(s^2)) / sum(df) ) ) / sqrt( 2 / df ) )
return(sum(df$d^2))
})
sim.h
hist(sim.h)
H
10^5
10000==10^5
10000==10^4
mean(sim.h >= H)
set.seed(920832689)
system.time({
sim.ys <- simulate(fm, nsim = 10^4)
sim.df <- lapply(sim.ys, function(y) {
df <- fm@frame
df$sbvalue <- y
return(df)
})
sim.h <- sapply(sim.df, FUN = function(x){
reduced.df <- subset(x, !subject %in% few.obs)
df <- ddply(reduced.df,  .(subject), calc_s_df, formula = sbvalue ~ week + I(week^2))
df <- transform(df, d = ( log(s^2) - ( sum(df * log(s^2)) / sum(df) ) ) / sqrt( 2 / df ) )
return(sum(df$d^2))
})
})
mean(sim.h >= H)
data("radon", package = "HLMdiag")
radon <- ddply(radon, .(county), transform, n = length(county))
# Model from which cyclone lineup was created
fm <- lmer(log.radon ~ basement + uranium + (basement | county), data = subset(radon, n > 9))
test.df2 <- ddply(fm@frame, .(county), calc_s_df, formula = log.radon ~ basement)
test.df2 <- transform(test.df2, d = ( log(s^2) - ( sum(df * log(s^2)) / sum(df) ) ) / sqrt( 2 / df ) )
H2 <- sum(test.df2$d^2)
pchisq(H2, df = nrow(test.df2) - 1, lower.tail = FALSE)
# Checking the p-value via simulation
set.seed(987654321)
sim.ys <- simulate(fm, nsim = 1000)
sim.df <- lapply(sim.ys, function(y) {
df <- fm@frame
df$log.radon <- y
return(df)
})
sim.h <- sapply(sim.df, FUN = function(x){
df <- ddply(x,  .(county), calc_s_df, formula = log.radon ~ basement)
df <- transform(df, d = ( log(s^2) - ( sum(df * log(s^2)) / sum(df) ) ) / sqrt( 2 / df ) )
return(sum(df$d^2))
})
fm <- lmer(log.radon ~ basement + uranium + (basement | county), data = subset(radon, n > 5))
test.df2 <- ddply(fm@frame, .(county), calc_s_df, formula = log.radon ~ basement)
test.df2 <- transform(test.df2, d = ( log(s^2) - ( sum(df * log(s^2)) / sum(df) ) ) / sqrt( 2 / df ) )
H2 <- sum(test.df2$d^2)
pchisq(H2, df = nrow(test.df2) - 1, lower.tail = FALSE)
# Checking the p-value via simulation
set.seed(987654321)
sim.ys <- simulate(fm, nsim = 1000)
sim.df <- lapply(sim.ys, function(y) {
df <- fm@frame
df$log.radon <- y
return(df)
})
sim.h <- sapply(sim.df, FUN = function(x){
df <- ddply(x,  .(county), calc_s_df, formula = log.radon ~ basement)
df <- transform(df, d = ( log(s^2) - ( sum(df * log(s^2)) / sum(df) ) ) / sqrt( 2 / df ) )
return(sum(df$d^2))
})
sim.h
mean(sim.h >= H2)
set.seed(987654321)
sim.ys <- simulate(fm, nsim = 10e4)
sim.df <- lapply(sim.ys, function(y) {
df <- fm@frame
df$log.radon <- y
return(df)
})
sim.h <- sapply(sim.df, FUN = function(x){
df <- ddply(x,  .(county), calc_s_df, formula = log.radon ~ basement)
df <- transform(df, d = ( log(s^2) - ( sum(df * log(s^2)) / sum(df) ) ) / sqrt( 2 / df ) )
return(sum(df$d^2))
})
1e4
set.seed(987654321)
sim.ys <- simulate(fm, nsim = 1e4)
sim.df <- lapply(sim.ys, function(y) {
df <- fm@frame
df$log.radon <- y
return(df)
})
sim.h <- sapply(sim.df, FUN = function(x){
df <- ddply(x,  .(county), calc_s_df, formula = log.radon ~ basement)
df <- transform(df, d = ( log(s^2) - ( sum(df * log(s^2)) / sum(df) ) ) / sqrt( 2 / df ) )
return(sum(df$d^2))
})
mean(sim.h >= H2)
library(ggplot2)
library(lme4)     # for modeling
library(HLMdiag)  # for residuals
library(mlmRev)   # for the exam data
library(nullabor) # for lineups
library(plyr)
library(reshape2)
library(stringr)
library(gridSVG)
install.packages("nullabor")
install.packages("girdSVG")
install.packages("gridSVG")
library(nullabor) # for lineups
library(gridSVG)
library(MEMSS) # for the Dialyzer data set
install.packages("MEMSS") # for the Dialyzer data set
M1 <- lmer(rate ~ (pressure + I(pressure^2))*QB + (pressure + I(pressure^2) | Subject),
data = Dialyzer)
m1.resid.df <- data.frame(pressure = M1@frame$pressure, resid = resid(M1))
m1.sims <- simulate(M1, nsim = 19)
m1.refit <- lapply(m1.sims, refit, object = M1)
m1.sim.resids <- ldply(m1.refit, function(x) data.frame(x@frame, resid = resid(x)))
m1.sim.resids$.n <- as.numeric(str_extract(m1.sim.resids$.id, "\\d+"))
location <- sample(20, 1)
qplot(pressure, resid, data = m1.resid.df, geom = c("point", "smooth"),
method = "loess") %+%
lineup(true = m1.resid.df, samples = m1.sim.resids, pos=location) +
facet_wrap(~ .sample, ncol = 5) +
xlab(NULL) + ylab(NULL) +
theme(axis.text.y = element_blank(), axis.text.x = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank())
library(lme4.0)
install.packages("lme4.0")
str(M1)
M1 <- lmer(rate ~ (pressure + I(pressure^2))*QB + (pressure + I(pressure^2) | Subject),
data = Dialyzer)
library(MEMSS) # for the Dialyzer data set
M1 <- lmer(rate ~ (pressure + I(pressure^2))*QB + (pressure + I(pressure^2) | Subject),
data = Dialyzer)
M1 <- lmer(rate ~ (pressure + I(pressure^2))*QB + (pressure + I(pressure^2) | Subject),
data = Dialyzer)
m1.resid.df <- data.frame(pressure = M1@frame$pressure, resid = resid(M1))
m1.sims <- simulate(M1, nsim = 19)
m1.refit <- lapply(m1.sims, refit, object = M1)
m1.sim.resids <- ldply(m1.refit, function(x) data.frame(x@frame, resid = resid(x)))
m1.sim.resids$.n <- as.numeric(str_extract(m1.sim.resids$.id, "\\d+"))
qplot(pressure, resid, data = m1.resid.df, geom = c("point", "smooth"),
method = "loess")
M2 <- lmer(rate ~ (pressure + I(pressure^2) + I(pressure^3) + I(pressure^4))*QB + (pressure + I(pressure^2) | Subject), data = Dialyzer)
m2.resid.df <- data.frame(M2@frame, resid = resid(M2))
m2.sims <- simulate(M2, nsim = 19)
m2.refit <- lapply(m2.sims, refit, object = M2)
m2.sim.resids <- ldply(m2.refit, function(x) data.frame(x@frame, resid = resid(x)))
m2.sim.resids$.n <- as.numeric(str_extract(m2.sim.resids$.id, "\\d+"))
qplot(pressure, resid, data = m2.resid.df,
geom = "point", alpha = I(0.5))
?Dialyzer
qplot(pressure, resid, data = m2.resid.df,
geom = "point", alpha = I(0.5)) %+%
lineup(true = m2.resid.df, samples = m2.sim.resids) +
facet_wrap(~ .sample, ncol = 5) +
xlab(NULL) + ylab(NULL) +
theme(axis.text.y = element_blank(), axis.text.x = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank())
library(ggplot2)
library(lme4)     # for modeling
library(HLMdiag)  # for residuals
library(mlmRev)   # for the exam data
library(nullabor) # for lineups
library(plyr)
library(reshape2)
library(stringr)
library(gridSVG)
library(ggplot2)
library(lme4)     # for modeling
library(HLMdiag)  # for residuals
library(mlmRev)   # for the exam data
library(nullabor) # for lineups
library(plyr)
library(reshape2)
library(stringr)
library(gridSVG)
set.seed("20140501")
for (rep in 1:5) {
## Adding the random slope
M2 <- lmer(normexam ~ standLRT + (standLRT  | school), data = Exam)
M2.sims  <- simulate(M2, nsim = 19)#, seed = 1234)
M2.refit <- lapply(M2.sims, refit, object = M2)
M2.simy <- lapply(M2.refit, function(x) x@resp$y)
sim2.y <- do.call("cbind", M2.simy)
sim2.y <- melt(sim2.y)[,-1]
names(sim2.y) <- c(".n", "y")
sim2.y$.n <- as.numeric(str_extract(sim2.y$.n, "\\d+"))
sim2.y$standLRT <- rep(Exam$standLRT, rep = 19)
sim2.y$school <- rep(Exam$school, rep = 19)
# The "harder way" to get alpha working
M2.fitted <- ddply(sim2.y, .(.n, school), function(x) {
m <- lm(y ~ standLRT, data = x)
data.frame(x, fitted = fitted(m))
})
true.df <- subset(Exam, select = c(school, normexam, standLRT))
colnames(true.df)[2] <- "y"
true.fitted <- ddply(true.df, .(school), function(x) {
m <- lm(y ~ standLRT, data = x)
data.frame(x, fitted = fitted(m))
})
sessionInfo()
library(MEMSS)
M2 <- lmer(rate ~ (pressure + I(pressure^2) + I(pressure^3) + I(pressure^4))*QB + (pressure + I(pressure^2) | Subject), data = Dialyzer)
m2.resid.df <- data.frame(.n=20, Subject = M2@frame$Subject, resid = resid(M2))
set.seed("20040110")
foo <- rnorm(150000)
rm(foo)
m2.sims <- simulate(M2, nsim = 19)
m2.refit <- lapply(m2.sims, refit, object = M2)
m2.sim.resids <- ldply(m2.refit, function(x) data.frame(x@frame, resid = resid(x)))
m2.sim.resids$.n <- as.numeric(str_extract(m2.sim.resids$.id, "\\d+"))
m2.resid <- rbind(m2.sim.resids[,c(".n", "Subject", "resid")], m2.resid.df)
m2.resid$sample <- sample(20,20, replace=FALSE)[m2.resid$.n]
location <- m2.resid$sample[nrow(m2.resid)]
qplot(Subject, resid, data = dframe, geom = "boxplot", fill=I("grey70"), alpha=I(0.8)) +
facet_wrap(~ sample, ncol = 5) +
#  	geom_hline(yintercept=0, colour="grey50") +
xlab(NULL) + ylab(NULL) +
theme(axis.text.y = element_blank(), axis.text.x = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(), legend.position="none") +
scale_x_discrete(expand = c(.075,.075))
qplot(Subject, resid, data = m2.resid, geom = "boxplot", fill=I("grey70"), alpha=I(0.8)) +
facet_wrap(~ sample, ncol = 5) +
#  	geom_hline(yintercept=0, colour="grey50") +
xlab(NULL) + ylab(NULL) +
theme(axis.text.y = element_blank(), axis.text.x = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank(), legend.position="none") +
scale_x_discrete(expand = c(.075,.075))
